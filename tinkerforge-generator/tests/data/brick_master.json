{
  "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
  "api_version": [
    2,
    0,
    10
  ],
  "category": "Brick",
  "device_identifier": 13,
  "name": "Master",
  "display_name": {
    "short": "Master",
    "long": "Master Brick"
  },
  "manufacturer": "Tinkerforge",
  "description": {
    "en": "Basis to build stacks and has 4 Bricklet ports",
    "de": "Grundlage um Stapel zu bauen und bietet 4 Bricklet Anschl\u00fcsse"
  },
  "released": true,
  "documented": true,
  "doc": {
    "en": "",
    "de": ""
  },
  "packets": [
    {
      "level": "normal",
      "type": "function",
      "name": "Get Stack Voltage",
      "function_id": 1,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the stack voltage. The stack voltage is the\nvoltage that is supplied via the stack, i.e. it is given by a\nStep-Down or Step-Up Power Supply.\n\n.. note::\n It is not possible to measure voltages supplied per PoE or USB with this function.\n",
          "de": "\nGibt die Spannung des Stapels zur\u00fcck. Diese Spannung wird \u00fcber\nden Stapel verteilt und kann zum Beispiel \u00fcber eine Step-Down oder\nStep-Up Power Supply eingespeist werden.\n\n.. note::\n Es ist mit dieser Funktion nicht m\u00f6glich, Spannungen, die per PoE oder USB eingespeist werden, zu messen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Voltage",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Voltage",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Stack Current",
      "function_id": 2,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the stack current. The stack current is the\ncurrent that is drawn via the stack, i.e. it is given by a\nStep-Down or Step-Up Power Supply.\n\n.. note::\n It is not possible to measure the current drawn via PoE or USB with this function.\n",
          "de": "\nGibt den Stromverbrauch des Stapels zur\u00fcck. Der angegebene Strom\nbezieht sich auf den Stromverbrauch der am Stapel angeschlossenen Verbraucher.\nDie Speisung kann z.B. \u00fcber eine Step-Down oder Step-Up Power Supply erfolgen.\n\n.. note::\n Es ist mit dieser Funktion nicht m\u00f6glich, den Stromverbrauch \u00fcber PoE oder USB zu messen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Current",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Current",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Extension Type",
      "function_id": 3,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nWrites the extension type to the EEPROM of a specified extension.\nThe extension is either 0 or 1 (0 is the lower one, 1 is the upper one,\nif only one extension is present use 0).\n\nPossible extension types:\n\n.. csv-table::\n :header: \"Type\", \"Description\"\n :widths: 10, 100\n\n \"1\",    \"Chibi\"\n \"2\",    \"RS485\"\n \"3\",    \"WIFI\"\n \"4\",    \"Ethernet\"\n \"5\",    \"WIFI 2.0\"\n\nThe extension type is already set when bought and it can be set with the\nBrick Viewer, it is unlikely that you need this function.\n",
          "de": "\nSchreibt den Typ der Extension in den EEPROM der angegebenen Extension.\nDie Extension kann entweder 0 oder 1 sein (0 ist die untere, 1\ndie obere, wenn nur eine Extension verf\u00fcgbar ist, ist 0 zu verwenden)\n\nM\u00f6gliche Extensiontypen:\n\n.. csv-table::\n :header: \"Typ\", \"Beschreibung\"\n :widths: 10, 100\n\n \"1\",    \"Chibi\"\n \"2\",    \"RS485\"\n \"3\",    \"WIFI\"\n \"4\",    \"Ethernet\"\n \"5\",    \"WIFI 2.0\"\n\nDer Typ der Extension ist schon gesetzt beim Erwerb der Extension und kann\n\u00fcber den Brick Viewer gesetzt werden. Daher ist es unwahrscheinlich, dass\ndiese Funktion ben\u00f6tigt wird.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Extension",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Extension",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Exttype",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Exttype",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Extension Type",
                "constants": [
                  {
                    "name": "Chibi",
                    "value": 1
                  },
                  {
                    "name": "RS485",
                    "value": 2
                  },
                  {
                    "name": "Wifi",
                    "value": 3
                  },
                  {
                    "name": "Ethernet",
                    "value": 4
                  },
                  {
                    "name": "Wifi2",
                    "value": 5
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Extension Type",
      "function_id": 4,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the type for a given extension as set by :func:`Set Extension Type`.\n",
          "de": "\nGibt den Typ der angegebenen Extension zur\u00fcck, wie von :func:`Set Extension Type` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Extension",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Extension",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Exttype",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Exttype",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Extension Type",
                "constants": [
                  {
                    "name": "Chibi",
                    "value": 1
                  },
                  {
                    "name": "RS485",
                    "value": 2
                  },
                  {
                    "name": "Wifi",
                    "value": 3
                  },
                  {
                    "name": "Ethernet",
                    "value": 4
                  },
                  {
                    "name": "Wifi2",
                    "value": 5
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is Chibi Present",
      "function_id": 5,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the Master Brick is at position 0 in the stack and a Chibi\nExtension is available.\n",
          "de": "\nGibt *true* zur\u00fcck, wenn der Master Brick an Position 0 im Stapel und eine\nChibi Extension verf\u00fcgbar ist.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Present",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Present",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Chibi Address",
      "function_id": 6,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the address belonging to the Chibi Extension.\n\nIt is possible to set the address with the Brick Viewer and it will be\nsaved in the EEPROM of the Chibi Extension, it does not\nhave to be set on every startup.\n",
          "de": "\nSetzt die zugeh\u00f6rige Adresse der Chibi Extension.\n\nEs ist m\u00f6glich die Adresse mit dem Brick Viewer zu setzen und diese\nwird im EEPROM der Chibi Extension abgespeichert. Ein Setzen bei\njedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Address",
      "function_id": 7,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the address as set by :func:`Set Chibi Address`.\n",
          "de": "\nGibt die Adresse zur\u00fcck, wie von :func:`Set Chibi Address` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Chibi Master Address",
      "function_id": 8,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the address of the Chibi Master. This address is used if the\nChibi Extension is used as slave (i.e. it does not have a USB connection).\n\nIt is possible to set the address with the Brick Viewer and it will be\nsaved in the EEPROM of the Chibi Extension, it does not\nhave to be set on every startup.\n",
          "de": "\nSetzt die Adresse des Chibi Master. Diese Adresse wird verwendet\nwenn die Chibi Extension als Slave verwendet wird (z.B. wenn keine USB-Verbindung\nbesteht).\n\nEs ist m\u00f6glich die Adresse mit dem Brick Viewer zu setzen und diese wird im\nEEPROM der Chibi Extension abgespeichert. Ein Setzen bei\njedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Master Address",
      "function_id": 9,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the address as set by :func:`Set Chibi Master Address`.\n",
          "de": "\nGibt die Adresse zur\u00fcck, wie von :func:`Set Chibi Master Address` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Chibi Slave Address",
      "function_id": 10,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets up to 254 slave addresses. 0 has a\nspecial meaning, it is used as list terminator and not allowed as normal slave\naddress. The address numeration (via :param:`num` parameter) has to be used\nascending from 0. For example: If you use the Chibi Extension in Master mode\n(i.e. the stack has an USB connection) and you want to talk to three other\nChibi stacks with the slave addresses 17, 23, and 42, you should call with\n``(0, 17)``, ``(1, 23)``, ``(2, 42)`` and ``(3, 0)``. The last call with\n``(3, 0)`` is a list terminator and indicates that the Chibi slave address\nlist contains 3 addresses in this case.\n\nIt is possible to set the addresses with the Brick Viewer, that will take care\nof correct address numeration and list termination.\n\nThe slave addresses will be saved in the EEPROM of the Chibi Extension, they\ndon't have to be set on every startup.\n",
          "de": "\nSetzt bis zu 254 Slave Adressen. 0 hat eine\nbesondere Bedeutung, sie wird zur Terminierung der Liste verwendet und ist nicht\nals normale Slave Adresse erlaubt.\nDie Adressnummerierung (mittels :param:`num` Parameter) muss aufsteigend ab\n0 erfolgen. Beispiel: Wenn die Chibi Extension im Master Modus verwendet wird\n(z.B. wenn der Stapel eine USB-Verbindung hat) und es soll mit drei weiteren\nChibi Stapeln kommuniziert werden, mit den Adressen 17, 23 und 42, sollten die\nAufrufe ``(0, 17)``, ``(1, 23)``, ``(2, 42)`` und ``(3, 0)`` sein. Der letzte\nAufruf mit ``(3, 0)`` dient der Terminierung der Liste und zeigt an, dass die\nChibi Slave Adressliste in diesem Fall 3 Eintr\u00e4ge beinhaltet.\n\nEs ist m\u00f6glich die Adressen mit dem Brick Viewer zu setzen, dieser k\u00fcmmert sich\ndann um korrekte Adressnummerierung und Terminierung der Liste.\n\nDie Slave Adresse werden im EEPROM der Chibi Extension abgespeichert. Ein\nSetzen bei jedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Num",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Num",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 254
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Slave Address",
      "function_id": 11,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the slave address for a given :param:`num` as set by\n:func:`Set Chibi Slave Address`.\n",
          "de": "\nGibt die Slave Adresse f\u00fcr eine Adressnummerierung (mittels :param:`num` Parameter)\nzur\u00fcck, wie von :func:`Set Chibi Slave Address` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Num",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Num",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 254
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Signal Strength",
      "function_id": 12,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the signal strength in dBm. The signal strength updates every time a\npacket is received.\n",
          "de": "\nGibt die Signalst\u00e4rke in dBm zur\u00fcck. Die Aktualisierung der Signalst\u00e4rke\nwird bei jedem Empfang eines Paketes durchgef\u00fchrt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Signal Strength",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Signal Strength",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Decibel",
                  "de": "Dezibel"
                },
                "symbol": "dB",
                "usage": {
                  "en": "Level",
                  "de": "Pegel"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Error Log",
      "function_id": 13,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns underrun, CRC error, no ACK and overflow error counts of the Chibi\ncommunication. If these errors start rising, it is likely that either the\ndistance between two Chibi stacks is becoming too big or there are\ninterferences.\n",
          "de": "\nGibt folgende Fehlerz\u00e4hler der Chibi Kommunikation zur\u00fcck: Underrun, CRC Fehler,\nkein ACK und Overflow. Bei Anstieg dieser Fehlerz\u00e4hler ist es wahrscheinlich, dass\nentweder die Entfernung zwischen zwei Chibi Stapeln zu gro\u00df wird oder St\u00f6rungen\nvorliegen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Underrun",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Underrun",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "CRC Error",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "CRC Error",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "No Ack",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "No Ack",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Overflow",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Overflow",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Chibi Frequency",
      "function_id": 14,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the Chibi frequency range for the Chibi Extension. Possible values are:\n\n.. csv-table::\n :header: \"Type\", \"Description\"\n :widths: 10, 100\n\n \"0\",    \"OQPSK 868MHz (Europe)\"\n \"1\",    \"OQPSK 915MHz (US)\"\n \"2\",    \"OQPSK 780MHz (China)\"\n \"3\",    \"BPSK40 915MHz\"\n\nIt is possible to set the frequency with the Brick Viewer and it will be\nsaved in the EEPROM of the Chibi Extension, it does not\nhave to be set on every startup.\n",
          "de": "\nSetzt den Chibi Frequenzbereich der Chibi Extension. M\u00f6gliche Werte sind:\n\n.. csv-table::\n :header: \"Typ\", \"Beschreibung\"\n :widths: 10, 100\n\n \"0\",    \"OQPSK 868MHz (Europe)\"\n \"1\",    \"OQPSK 915MHz (US)\"\n \"2\",    \"OQPSK 780MHz (China)\"\n \"3\",    \"BPSK40 915MHz\"\n\nEs ist m\u00f6glich den Frequenzbereich mit dem Brick Viewer zu setzen und dieser wird\nim EEPROM der Chibi Extension abgespeichert. Ein Setzen bei\njedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Frequency",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Frequency",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Chibi Frequency",
                "constants": [
                  {
                    "name": "OQPSK 868 MHz",
                    "value": 0
                  },
                  {
                    "name": "OQPSK 915 MHz",
                    "value": 1
                  },
                  {
                    "name": "OQPSK 780 MHz",
                    "value": 2
                  },
                  {
                    "name": "BPSK40 915 MHz",
                    "value": 3
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Frequency",
      "function_id": 15,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the frequency value as set by :func:`Set Chibi Frequency`.\n",
          "de": "\nGibt den Frequenzbereich zur\u00fcck, wie von :func:`Set Chibi Frequency` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Frequency",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Frequency",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Chibi Frequency",
                "constants": [
                  {
                    "name": "OQPSK 868 MHz",
                    "value": 0
                  },
                  {
                    "name": "OQPSK 915 MHz",
                    "value": 1
                  },
                  {
                    "name": "OQPSK 780 MHz",
                    "value": 2
                  },
                  {
                    "name": "BPSK40 915 MHz",
                    "value": 3
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Chibi Channel",
      "function_id": 16,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the channel used by the Chibi Extension. Possible channels are\ndifferent for different frequencies:\n\n.. csv-table::\n :header: \"Frequency\", \"Possible Channels\"\n :widths: 40, 60\n\n \"OQPSK 868MHz (Europe)\", \"0\"\n \"OQPSK 915MHz (US)\",     \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"\n \"OQPSK 780MHz (China)\",  \"0, 1, 2, 3\"\n \"BPSK40 915MHz\",         \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"\n\nIt is possible to set the channel with the Brick Viewer and it will be\nsaved in the EEPROM of the Chibi Extension, it does not\nhave to be set on every startup.\n",
          "de": "\nSetzt den verwendeten Kanal der Chibi Extension. Die m\u00f6glichen Kan\u00e4le sind\nabh\u00e4ngig vom verwendeten Frequenzbereich:\n\n.. csv-table::\n :header: \"Frequenzbereich\", \"M\u00f6gliche Kan\u00e4le\"\n :widths: 40, 60\n\n \"OQPSK 868MHz (Europe)\", \"0\"\n \"OQPSK 915MHz (US)\",     \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"\n \"OQPSK 780MHz (China)\",  \"0, 1, 2, 3\"\n \"BPSK40 915MHz\",         \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"\n\nEs ist m\u00f6glich den Kanal mit dem Brick Viewer zu setzen und dieser wird\nim EEPROM der Chibi Extension abgespeichert. Ein Setzen bei\njedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Channel",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Channel",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "dynamic",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chibi Channel",
      "function_id": 17,
      "since_firmware": [
        1,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the channel as set by :func:`Set Chibi Channel`.\n",
          "de": "\nGibt den Kanal zur\u00fcck, wie von :func:`Set Chibi Channel` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Channel",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Channel",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "dynamic",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is RS485 Present",
      "function_id": 18,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the Master Brick is at position 0 in the stack and a RS485\nExtension is available.\n",
          "de": "\nGibt *true* zur\u00fcck, wenn der Master Brick an Position 0 im Stapel und eine\nRS485 Extension verf\u00fcgbar ist.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Present",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Present",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set RS485 Address",
      "function_id": 19,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the address (0-255) belonging to the RS485 Extension.\n\nSet to 0 if the RS485 Extension should be the RS485 Master (i.e.\nconnected to a PC via USB).\n\nIt is possible to set the address with the Brick Viewer and it will be\nsaved in the EEPROM of the RS485 Extension, it does not\nhave to be set on every startup.\n",
          "de": "\nSetzt die zugeh\u00f6rige Adresse (0-255) der RS485 Extension.\n\nUm eine RS485 Extension als RS485 Master (z.B. verbunden mit einem PC \u00fcber\nUSB) zu betreiben muss die Adresse auf 0 gesetzt werden.\n\nEs ist m\u00f6glich die Adresse mit dem Brick Viewer zu setzen und diese wird im\nEEPROM der RS485 Extension abgespeichert. Ein Setzen bei\njedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get RS485 Address",
      "function_id": 20,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the address as set by :func:`Set RS485 Address`.\n",
          "de": "\nGibt die Adresse zur\u00fcck, wie von :func:`Set RS485 Address` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set RS485 Slave Address",
      "function_id": 21,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets up to 255 slave addresses. Valid addresses are in range 1-255. 0 has a\nspecial meaning, it is used as list terminator and not allowed as normal slave\naddress. The address numeration (via ``num`` parameter) has to be used\nascending from 0. For example: If you use the RS485 Extension in Master mode\n(i.e. the stack has an USB connection) and you want to talk to three other\nRS485 stacks with the addresses 17, 23, and 42, you should call with\n``(0, 17)``, ``(1, 23)``, ``(2, 42)`` and ``(3, 0)``. The last call with\n``(3, 0)`` is a list terminator and indicates that the RS485 slave address list\ncontains 3 addresses in this case.\n\nIt is possible to set the addresses with the Brick Viewer, that will take care\nof correct address numeration and list termination.\n\nThe slave addresses will be saved in the EEPROM of the Chibi Extension, they\ndon't have to be set on every startup.\n",
          "de": "\nSetzt bis zu 255 Slave Adressen. G\u00fcltige Adressen sind 1-255. 0 hat eine\nbesondere Bedeutung, sie wird zur Terminierung der Liste verwendet und ist nicht\nals normale Slave Adresse erlaubt.\nDie Adressnummerierung (mittels ``num`` Parameter) muss aufsteigend ab\n0 erfolgen. Beispiel: Wenn die RS485 Extension im Master Modus verwendet wird\n(z.B. wenn der Stapel eine USB-Verbindung hat) und es soll mit drei weiteren\nRS485 Stapeln kommuniziert werden, mit den Adressen 17, 23 und 42, sollten die\nAufrufe ``(0, 17)``, ``(1, 23)``, ``(2, 42)`` und ``(3, 0)`` sein. Der letzte\nAufruf mit ``(3, 0)`` dient der Terminierung der Liste und zeigt an, dass die\nRS485 Slave Adressliste in diesem Fall 3 Eintr\u00e4ge beinhaltet.\n\nEs ist m\u00f6glich die Adressen mit dem Brick Viewer zu setzen, dieser k\u00fcmmert sich\ndann um korrekte Adressnummerierung und Terminierung der Liste.\n\nDie Slave Adresse werden im EEPROM der RS485 Extension abgespeichert. Ein\nSetzen bei jedem Start ist daher nicht notwendig.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Num",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Num",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get RS485 Slave Address",
      "function_id": 22,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the slave address for a given ``num`` as set by\n:func:`Set RS485 Slave Address`.\n",
          "de": "\nGibt die Slave Adresse f\u00fcr eine Adressnummerierung (mittels ``num`` Parameter)\nzur\u00fcck, wie von :func:`Set RS485 Slave Address` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Num",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Num",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Address",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get RS485 Error Log",
      "function_id": 23,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns CRC error counts of the RS485 communication.\nIf this counter starts rising, it is likely that the distance\nbetween the RS485 nodes is too big or there is some kind of\ninterference.\n",
          "de": "\nGibt den CRC Fehlerz\u00e4hler der RS485 Kommunikation zur\u00fcck. Wenn dieser Z\u00e4hler\nansteigt ist es wahrscheinlich, dass der Abstand zwischen zwei RS485-Teilnehmern\nzu gro\u00df ist oder es St\u00f6rungen gibt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "CRC Error",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "CRC Error",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set RS485 Configuration",
      "function_id": 24,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the configuration of the RS485 Extension. The\nMaster Brick will try to match the given baud rate as exactly as possible.\nThe maximum recommended baud rate is 2000000 (2MBd).\nPossible values for parity are 'n' (none), 'e' (even) and 'o' (odd).\n\nIf your RS485 is unstable (lost messages etc.), the first thing you should\ntry is to decrease the speed. On very large bus (e.g. 1km), you probably\nshould use a value in the range of 100000 (100kBd).\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n",
          "de": "\nSetzt die Schnittstellenkonfiguration der RS485 Extension.\nDer Master Brick versucht die vorgegebene Baudrate so\ngenau wie m\u00f6glich zu erreichen. Die maximale empfohlene Baudrate ist 2000000\n(2MBd). M\u00f6gliche Werte f\u00fcr die Parit\u00e4t sind 'n' (keine), 'e' (gerade) und\n'o' (ungerade).\n\nWenn die RS485 Kommunikation instabil ist (verlorene Nachrichten etc.), sollte\nzuerst die Baudrate verringert werden. Sehr lange Busleitungen (z.B. 1km)\nsollten m\u00f6glichst Werte im Bereich von 100000 (100kBd) verwenden.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt. Dass\nbedeutet, der Master Brick muss nach einer Konfiguration neu gestartet werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Speed",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Speed",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Baud",
                  "de": "Baud"
                },
                "symbol": "Bd",
                "usage": {
                  "en": "Symbol rate",
                  "de": "Symbolrate"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Parity",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Parity",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "RS485 Parity",
                "constants": [
                  {
                    "name": "None",
                    "value": "n"
                  },
                  {
                    "name": "Even",
                    "value": "e"
                  },
                  {
                    "name": "Odd",
                    "value": "o"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Stopbits",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Stopbits",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 2
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get RS485 Configuration",
      "function_id": 25,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set RS485 Configuration`.\n",
          "de": "\nGibt die Schnittstellenkonfiguration zur\u00fcck, wie von :func:`Set RS485 Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Speed",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Speed",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Baud",
                  "de": "Baud"
                },
                "symbol": "Bd",
                "usage": {
                  "en": "Symbol rate",
                  "de": "Symbolrate"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Parity",
          "type": "char",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Parity",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "RS485 Parity",
                "constants": [
                  {
                    "name": "None",
                    "value": "n"
                  },
                  {
                    "name": "Even",
                    "value": "e"
                  },
                  {
                    "name": "Odd",
                    "value": "o"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Stopbits",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Stopbits",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 2
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is Wifi Present",
      "function_id": 26,
      "since_firmware": [
        1,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the Master Brick is at position 0 in the stack and a WIFI\nExtension is available.\n",
          "de": "\nGibt *true* zur\u00fcck, wenn der Master Brick an Position 0 im Stapel und eine\nWIFI Extension verf\u00fcgbar ist.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Present",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Present",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Configuration",
      "function_id": 27,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the configuration of the WIFI Extension. The ``ssid`` can have a max length\nof 32 characters. Possible values for ``connection`` are:\n\n.. csv-table::\n :header: \"Value\", \"Description\"\n :widths: 10, 90\n\n \"0\", \"DHCP\"\n \"1\", \"Static IP\"\n \"2\", \"Access Point: DHCP\"\n \"3\", \"Access Point: Static IP\"\n \"4\", \"Ad Hoc: DHCP\"\n \"5\", \"Ad Hoc: Static IP\"\n\nIf you set ``connection`` to one of the static IP options then you have to\nsupply ``ip``, ``subnet_mask`` and ``gateway`` as an array of size 4 (first\nelement of the array is the least significant byte of the address). If\n``connection`` is set to one of the DHCP options then ``ip``, ``subnet_mask``\nand ``gateway`` are ignored, you can set them to 0.\n\nThe last parameter is the port that your program will connect to.\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n\nIt is recommended to use the Brick Viewer to set the WIFI configuration.\n",
          "de": "\nSetzt die Konfiguration der WIFI Extension. Die ``ssid`` darf eine maximale\nL\u00e4nge von 32 Zeichen haben. M\u00f6gliche Werte f\u00fcr ``connection`` sind:\n\n.. csv-table::\n :header: \"Wert\", \"Beschreibung\"\n :widths: 10, 90\n\n \"0\", \"DHCP\"\n \"1\", \"Statische IP\"\n \"2\", \"Access Point: DHCP\"\n \"3\", \"Access Point: Statische IP\"\n \"4\", \"Ad Hoc: DHCP\"\n \"5\", \"Ad Hoc: Statische IP\"\n\nWenn ``connection`` auf eine der statische IP Optionen gesetzt wird, dann m\u00fcssen\n``ip``, ``subnet_mask`` und ``gateway`` als ein Array der Gr\u00f6\u00dfe 4 angegeben\nwerden. Dabei ist das erste Element im Array das niederwertigste Byte. Falls\n``connection`` auf eine der DHCP Optionen gesetzt ist, werden ``ip``,\n``subnet_mask`` und ``gateway`` ignoriert.\n\nDer letzte Parameter ist der Port auf den das Anwendungsprogramm sich\nverbindet.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt. Dass\nbedeutet, der Master Brick muss nach einer Konfiguration neu gestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Connection",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connection",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi Connection",
                "constants": [
                  {
                    "name": "DHCP",
                    "value": 0
                  },
                  {
                    "name": "Static IP",
                    "value": 1
                  },
                  {
                    "name": "Access Point DHCP",
                    "value": 2
                  },
                  {
                    "name": "Access Point Static IP",
                    "value": 3
                  },
                  {
                    "name": "Ad Hoc DHCP",
                    "value": 4
                  },
                  {
                    "name": "Ad Hoc Static IP",
                    "value": 5
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4223,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Configuration",
      "function_id": 28,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set Wifi Configuration`.\n",
          "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`Set Wifi Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Connection",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connection",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi Connection",
                "constants": [
                  {
                    "name": "DHCP",
                    "value": 0
                  },
                  {
                    "name": "Static IP",
                    "value": 1
                  },
                  {
                    "name": "Access Point DHCP",
                    "value": 2
                  },
                  {
                    "name": "Access Point Static IP",
                    "value": 3
                  },
                  {
                    "name": "Ad Hoc DHCP",
                    "value": 4
                  },
                  {
                    "name": "Ad Hoc Static IP",
                    "value": 5
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4223,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Encryption",
      "function_id": 29,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the encryption of the WIFI Extension. The first parameter is the\ntype of the encryption. Possible values are:\n\n.. csv-table::\n :header: \"Value\", \"Description\"\n :widths: 10, 90\n\n \"0\", \"WPA/WPA2\"\n \"1\", \"WPA Enterprise (EAP-FAST, EAP-TLS, EAP-TTLS, PEAP)\"\n \"2\", \"WEP\"\n \"3\", \"No Encryption\"\n\nThe ``key`` has a max length of 50 characters and is used if ``encryption``\nis set to 0 or 2 (WPA/WPA2 or WEP). Otherwise the value is ignored.\n\nFor WPA/WPA2 the key has to be at least 8 characters long. If you want to set\na key with more than 50 characters, see :func:`Set Long Wifi Key`.\n\nFor WEP the key has to be either 10 or 26 hexadecimal digits long. It is\npossible to set the WEP ``key_index`` (1-4). If you don't know your\n``key_index``, it is likely 1.\n\nIf you choose WPA Enterprise as encryption, you have to set ``eap_options`` and\nthe length of the certificates (for other encryption types these parameters\nare ignored). The certificates\nthemselves can be set with :func:`Set Wifi Certificate`. ``eap_options`` consist\nof the outer authentication (bits 1-2), inner authentication (bit 3) and\ncertificate type (bits 4-5):\n\n.. csv-table::\n :header: \"Option\", \"Bits\", \"Description\"\n :widths: 20, 10, 70\n\n \"outer authentication\", \"1-2\", \"0=EAP-FAST, 1=EAP-TLS, 2=EAP-TTLS, 3=EAP-PEAP\"\n \"inner authentication\", \"3\", \"0=EAP-MSCHAP, 1=EAP-GTC\"\n \"certificate type\", \"4-5\", \"0=CA Certificate, 1=Client Certificate, 2=Private Key\"\n\nExample for EAP-TTLS + EAP-GTC + Private Key: ``option = 2 | (1 << 2) | (2 << 3)``.\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n\nIt is recommended to use the Brick Viewer to set the Wi-Fi encryption.\n",
          "de": "\nSetzt die Verschl\u00fcsselung der WIFI Extension. Der erste Parameter ist der\nTyp der Verschl\u00fcsselung. M\u00f6gliche Werte sind:\n\n.. csv-table::\n :header: \"Wert\", \"Beschreibung\"\n :widths: 10, 90\n\n \"0\", \"WPA/WPA2\"\n \"1\", \"WPA Enterprise (EAP-FAST, EAP-TLS, EAP-TTLS, PEAP)\"\n \"2\", \"WEP\"\n \"3\", \"Keine Verschl\u00fcsselung\"\n\nDer ``key`` hat eine maximale L\u00e4nge von 50 Zeichen und wird benutzt\nfalls ``encryption`` auf 0 oder 2 (WPA/WPA2 oder WEP) gesetzt ist. Andernfalls\nwird dieser Parameter ignoriert.\n\nF\u00fcr WPA/WPA2 muss der Schl\u00fcssel mindestens 8 Zeichen lang sein. Wenn ein\nSchl\u00fcssel mit mehr als 50 Zeichen gesetzt werden soll, kann\n:func:`Set Long Wifi Key` genutzt werden.\n\nF\u00fcr WEP muss der Schl\u00fcssel entweder 10 oder 26 hexadezimale Zeichen lang sein.\nEs ist m\u00f6glich den ``key_index`` zu setzen (1-4). Fall der ``key_index``\nunbekannt ist, ist er wahrscheinlich 1.\n\nWenn WPA Enterprise als ``encryption`` gew\u00e4hlt wird, m\u00fcssen ``eap_options`` und\ndie L\u00e4nge der Zertifikate gesetzt werden. Die Zertifikate selbst k\u00f6nnen mit\n:func:`Set Wifi Certificate` \u00fcbertragen\nwerden. Die ``eap_options`` bestehen aus Outer Authentication (Bits 1-2),\nInner Authentication (Bit 3) und Certificate Type (Bits 4-5):\n\n.. csv-table::\n :header: \"Option\", \"Bits\", \"Beschreibung\"\n :widths: 10, 10, 80\n\n \"Outer Authentication\", \"1-2\", \"0=EAP-FAST, 1=EAP-TLS, 2=EAP-TTLS, 3=EAP-PEAP\"\n \"Inner Authentication\", \"3\", \"0=EAP-MSCHAP, 1=EAP-GTC\"\n \"Certificate Type\", \"4-5\", \"0=CA Certificate, 1=Client Certificate, 2=Private Key\"\n\nBeispiel f\u00fcr EAP-TTLS + EAP-GTC + Private Key: ``option = 2 | (1 << 2) | (2 << 3)``.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt.\nDas bedeutet der Master Brick muss nach einer Konfiguration neu gestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WLAN Verschl\u00fcsselung\nzu konfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Encryption",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Encryption",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi Encryption",
                "constants": [
                  {
                    "name": "WPA WPA2",
                    "value": 0
                  },
                  {
                    "name": "WPA Enterprise",
                    "value": 1
                  },
                  {
                    "name": "WEP",
                    "value": 2
                  },
                  {
                    "name": "No Encryption",
                    "value": 3
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Key",
          "type": "string",
          "cardinality": 50,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Key",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Key Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Key Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 4
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "EAP Options",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "EAP Options",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi EAP Option",
                "constants": [
                  {
                    "name": "Outer Auth EAP FAST",
                    "value": 0
                  },
                  {
                    "name": "Outer Auth EAP TLS",
                    "value": 1
                  },
                  {
                    "name": "Outer Auth EAP TTLS",
                    "value": 2
                  },
                  {
                    "name": "Outer Auth EAP PEAP",
                    "value": 3
                  },
                  {
                    "name": "Inner Auth EAP MSCHAP",
                    "value": 0
                  },
                  {
                    "name": "Inner Auth EAP GTC",
                    "value": 4
                  },
                  {
                    "name": "Cert Type CA Cert",
                    "value": 0
                  },
                  {
                    "name": "Cert Type Client Cert",
                    "value": 8
                  },
                  {
                    "name": "Cert Type Private Key",
                    "value": 16
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "CA Certificate Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "CA Certificate Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1312
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client Certificate Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client Certificate Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1312
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Private Key Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Private Key Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 4320
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Encryption",
      "function_id": 30,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the encryption as set by :func:`Set Wifi Encryption`.\n\n.. note::\n Since Master Brick Firmware version 2.4.4 the key is not returned anymore.\n",
          "de": "\nGibt die Verschl\u00fcsselungseinstellungen zur\u00fcck, wie von\n:func:`Set Wifi Encryption` gesetzt.\n\n.. note::\n Seit Master Brick Firmware Version 2.4.4 wird der Schl\u00fcssel nicht mehr\n zur\u00fcckgegeben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Encryption",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Encryption",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi Encryption",
                "constants": [
                  {
                    "name": "WPA WPA2",
                    "value": 0
                  },
                  {
                    "name": "WPA Enterprise",
                    "value": 1
                  },
                  {
                    "name": "WEP",
                    "value": 2
                  },
                  {
                    "name": "No Encryption",
                    "value": 3
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Key",
          "type": "string",
          "cardinality": 50,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Key",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Key Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Key Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 4
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "EAP Options",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "EAP Options",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi EAP Option",
                "constants": [
                  {
                    "name": "Outer Auth EAP FAST",
                    "value": 0
                  },
                  {
                    "name": "Outer Auth EAP TLS",
                    "value": 1
                  },
                  {
                    "name": "Outer Auth EAP TTLS",
                    "value": 2
                  },
                  {
                    "name": "Outer Auth EAP PEAP",
                    "value": 3
                  },
                  {
                    "name": "Inner Auth EAP MSCHAP",
                    "value": 0
                  },
                  {
                    "name": "Inner Auth EAP GTC",
                    "value": 4
                  },
                  {
                    "name": "Cert Type CA Cert",
                    "value": 0
                  },
                  {
                    "name": "Cert Type Client Cert",
                    "value": 8
                  },
                  {
                    "name": "Cert Type Private Key",
                    "value": 16
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "CA Certificate Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "CA Certificate Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client Certificate Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client Certificate Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Private Key Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Private Key Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Status",
      "function_id": 31,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the status of the WIFI Extension. The ``state`` is updated automatically,\nall of the other parameters are updated on startup and every time\n:func:`Refresh Wifi Status` is called.\n\nPossible states are:\n\n.. csv-table::\n :header: \"State\", \"Description\"\n :widths: 10, 90\n\n \"0\", \"Disassociated\"\n \"1\", \"Associated\"\n \"2\", \"Associating\"\n \"3\", \"Error\"\n \"255\", \"Not initialized yet\"\n",
          "de": "\nGibt den Status der WIFI Extension zur\u00fcck. ``state`` wird automatisch\naktualisiert, alle anderen Parameter werden nur beim Starten und nach jedem\nAufruf von :func:`Refresh Wifi Status` aktualisiert.\n\nM\u00f6gliche Werte f\u00fcr *state* sind:\n\n.. csv-table::\n :header: \"State\", \"Beschreibung\"\n :widths: 10, 90\n\n \"0\", \"Getrennt\"\n \"1\", \"Verbunden\"\n \"2\", \"Verbindung wird aufgebaut\"\n \"3\", \"Fehler\"\n \"255\", \"Noch nicht initialisiert\"\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "BSSID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "BSSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Channel",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Channel",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "dynamic",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "RSSI",
          "type": "int16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "RSSI",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "RX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "RX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "TX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "TX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "State",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "State",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi State",
                "constants": [
                  {
                    "name": "Disassociated",
                    "value": 0
                  },
                  {
                    "name": "Associated",
                    "value": 1
                  },
                  {
                    "name": "Associating",
                    "value": 2
                  },
                  {
                    "name": "Error",
                    "value": 3
                  },
                  {
                    "name": "Not Initialized Yet",
                    "value": 255
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Refresh Wifi Status",
      "function_id": 32,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRefreshes the Wi-Fi status (see :func:`Get Wifi Status`). To read the status\nof the Wi-Fi module, the Master Brick has to change from data mode to\ncommand mode and back. This transaction and the readout itself is\nunfortunately time consuming. This means, that it might take some ms\nuntil the stack with attached WIFI Extension reacts again after this\nfunction is called.\n",
          "de": "\nAktualisiert den WLAN Status (siehe :func:`Get Wifi Status`). Um den Status\nvom WLAN Modul zu lesen, muss der Master Brick vom Datenmodus in den\nKommandomodus und wieder zur\u00fcck wechseln. Dieser Wechsel und das eigentliche\nAuslesen ist leider zeitaufw\u00e4ndig. Dass hei\u00dft, es dauert ein paar ms bis der\nStapel mit aufgesteckter WIFI Extension wieder reagiert nachdem die\nFunktion aufgerufen wurde.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Certificate",
      "function_id": 33,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nThis function is used to set the certificate as well as password and username\nfor WPA Enterprise. To set the username use index 0xFFFF,\nto set the password use index 0xFFFE. The max length of username and\npassword is 32.\n\nThe certificate is written in chunks of size 32 and the index is used as\nthe index of the chunk. ``data_length`` should nearly always be 32. Only\nthe last chunk can have a length that is not equal to 32.\n\nThe starting index of the CA Certificate is 0, of the Client Certificate\n10000 and for the Private Key 20000. Maximum sizes are 1312, 1312 and\n4320 byte respectively.\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after uploading the certificate.\n\nIt is recommended to use the Brick Viewer to set the certificate, username\nand password.\n",
          "de": "\nDiese Funktion kann benutzt werden um sowohl das Zertifikat als auch\nBenutzername und Passwort f\u00fcr WPA Enterprise zu setzen. F\u00fcr den Benutzernamen\nmuss Index 0xFFFF und f\u00fcr das Password Index 0xFFFE genutzt werden.\nDie maximale L\u00e4nge f\u00fcr beide ist 32.\n\nDas Zertifikat wird in Chunks der Gr\u00f6\u00dfe 32 geschrieben und der Index\ngibt den Index des Chunk an. ``data_length`` sollte fast immer auf 32 gesetzt\nwerden. Nur beim letzten Chunk ist eine L\u00e4nge ungleich 32 m\u00f6glich.\n\nDer Startindex f\u00fcr CA Certificate ist 0, f\u00fcr Client Certificate 10000 und\nf\u00fcr Private Key 20000. Die Maximalen Dateigr\u00f6\u00dfen sind jeweils 1312, 1312 und\n4320 Byte.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt.\nDas bedeutet der Master Brick muss nach einer Konfiguration neu gestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Zertifikate, Benutzernamen\nund Passwort zu konfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1311
                },
                {
                  "minimum": 10000,
                  "maximum": 11311
                },
                {
                  "minimum": 20000,
                  "maximum": 24319
                },
                {
                  "minimum": 65534,
                  "maximum": 65535
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Data Length",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 32
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Certificate",
      "function_id": 34,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the certificate for a given index as set by :func:`Set Wifi Certificate`.\n",
          "de": "\nGibt das Zertifikat f\u00fcr einen Index zur\u00fcck, wie von\n:func:`Set Wifi Certificate` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1311
                },
                {
                  "minimum": 10000,
                  "maximum": 11311
                },
                {
                  "minimum": 20000,
                  "maximum": 24319
                },
                {
                  "minimum": 65534,
                  "maximum": 65535
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Data Length",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 32
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Power Mode",
      "function_id": 35,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the power mode of the WIFI Extension. Possible modes are:\n\n.. csv-table::\n :header: \"Mode\", \"Description\"\n :widths: 10, 90\n\n \"0\", \"Full Speed (high power consumption, high throughput)\"\n \"1\", \"Low Power (low power consumption, low throughput)\"\n",
          "de": "\nSetzt den Stromsparmodus f\u00fcr die WIFI Extension. M\u00f6gliche Werte sind:\n\n.. csv-table::\n :header: \"Mode\", \"Beschreibung\"\n :widths: 10, 90\n\n \"0\", \"Full Speed (hoher Stromverbrauch, hoher Durchsatz)\"\n \"1\", \"Low Power (geringer Stromverbrauch, geringer Durchsatz)\"\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 0,
              "constant_group": {
                "name": "Wifi Power Mode",
                "constants": [
                  {
                    "name": "Full Speed",
                    "value": 0
                  },
                  {
                    "name": "Low Power",
                    "value": 1
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Power Mode",
      "function_id": 36,
      "since_firmware": [
        1,
        3,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the power mode as set by :func:`Set Wifi Power Mode`.\n",
          "de": "\nGibt den Stromsparmodus zur\u00fcck, wie von :func:`Set Wifi Power Mode` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 0,
              "constant_group": {
                "name": "Wifi Power Mode",
                "constants": [
                  {
                    "name": "Full Speed",
                    "value": 0
                  },
                  {
                    "name": "Low Power",
                    "value": 1
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Buffer Info",
      "function_id": 37,
      "since_firmware": [
        1,
        3,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns informations about the Wi-Fi receive buffer. The Wi-Fi\nreceive buffer has a max size of 1500 byte and if data is transfered\ntoo fast, it might overflow.\n\nThe return values are the number of overflows, the low watermark\n(i.e. the smallest number of bytes that were free in the buffer) and\nthe bytes that are currently used.\n\nYou should always try to keep the buffer empty, otherwise you will\nhave a permanent latency. A good rule of thumb is, that you can transfer\n1000 messages per second without problems.\n\nTry to not send more then 50 messages at a time without any kind of\nbreak between them.\n",
          "de": "\nGibt Informationen \u00fcber denn WLAN Empfangsbuffer zur\u00fcck. Der WLAN\nEmpfangsbuffer hat eine maximale Gr\u00f6\u00dfe von 1500 Byte und falls zu viele\nDaten \u00fcbertragen werden, kann er \u00fcberlaufen.\n\nDie R\u00fcckgabewerte sind die Anzahl der Overflows, die Low-Watermark\n(d.h. die kleinste Anzahl an Byte die je noch frei waren im Buffer) und\ndie Anzahl der im Moment verwendeten Bytes im Buffer.\n\nEs sollte immer versucht werden den Buffer leer zu halten, andernfalls\nist mit einer permanenten Latenz zu rechnen. Eine gute Daumenregel ist,\nnicht mehr als 1000 Nachrichten pro Sekunde zu verschicken.\n\nDabei sollten am besten nie mehr als 50 Nachrichten auf einmal ohne\nPausen gesendet werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Overflow",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Overflow",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Low Watermark",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Low Watermark",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1500
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Used",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Used",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 1500
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Regulatory Domain",
      "function_id": 38,
      "since_firmware": [
        1,
        3,
        4
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the regulatory domain of the WIFI Extension. Possible domains are:\n\n.. csv-table::\n :header: \"Domain\", \"Description\"\n :widths: 10, 90\n\n \"0\", \"FCC: Channel 1-11 (N/S America, Australia, New Zealand)\"\n \"1\", \"ETSI: Channel 1-13 (Europe, Middle East, Africa)\"\n \"2\", \"TELEC: Channel 1-14 (Japan)\"\n",
          "de": "\nSetzt den Geltungsbereich der WIFI Extension. M\u00f6gliche Werte sind:\n\n.. csv-table::\n :header: \"Geltungsbereich\", \"Beschreibung\"\n :widths: 10, 90\n\n \"0\", \"FCC: Kanal 1-11 (N/S Amerika, Australien, Neuseeland)\"\n \"1\", \"ETSI: Kanal 1-13 (Europa, Mittlerer Osten, Afrika)\"\n \"2\", \"TELEC: Kanal 1-14 (Japan)\"\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Domain",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Domain",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 1,
              "constant_group": {
                "name": "Wifi Domain",
                "constants": [
                  {
                    "name": "Channel 1To11",
                    "value": 0
                  },
                  {
                    "name": "Channel 1To13",
                    "value": 1
                  },
                  {
                    "name": "Channel 1To14",
                    "value": 2
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Regulatory Domain",
      "function_id": 39,
      "since_firmware": [
        1,
        3,
        4
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the regulatory domain as set by :func:`Set Wifi Regulatory Domain`.\n",
          "de": "\nGibt den Geltungsbereich zur\u00fcck, wie von :func:`Set Wifi Regulatory Domain` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Domain",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Domain",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 1,
              "constant_group": {
                "name": "Wifi Domain",
                "constants": [
                  {
                    "name": "Channel 1To11",
                    "value": 0
                  },
                  {
                    "name": "Channel 1To13",
                    "value": 1
                  },
                  {
                    "name": "Channel 1To14",
                    "value": 2
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get USB Voltage",
      "function_id": 40,
      "since_firmware": [
        1,
        3,
        5
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the USB voltage. Does not work with hardware version 2.1 or newer.\n",
          "de": "\nGibt die USB Spannung zur\u00fcck. Funktioniert nicht mit Hardware Version 2.1 oder neuer.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Voltage",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Voltage",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Long Wifi Key",
      "function_id": 41,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets a long Wi-Fi key (up to 63 chars, at least 8 chars) for WPA encryption.\nThis key will be used\nif the key in :func:`Set Wifi Encryption` is set to \"-\". In the old protocol,\na payload of size 63 was not possible, so the maximum key length was 50 chars.\n\nWith the new protocol this is possible, since we didn't want to break API,\nthis function was added additionally.\n",
          "de": "\nSetzt einen langen WLAN Schl\u00fcssel (bis zu 63 Zeichen, mindestens 8 Zeichen) f\u00fcr\nWPA Verschl\u00fcsselung. Dieser Schl\u00fcssel wird genutzt, wenn der Schl\u00fcssel in\n:func:`Set Wifi Encryption` auf \"-\" gesetzt wird. Im alten Protokoll war\nein Payload der Gr\u00f6\u00dfe 63 nicht m\u00f6glich, dadurch wurde die maximale\nSchl\u00fcssell\u00e4nge auf 50 gesetzt.\n\nMit dem neuen Protokoll ist die volle\nSchl\u00fcssell\u00e4nge m\u00f6glich. Da wir keine API brechen wollten, wurde diese\nFunktion zus\u00e4tzlich hinzugef\u00fcgt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Key",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Key",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Long Wifi Key",
      "function_id": 42,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the encryption key as set by :func:`Set Long Wifi Key`.\n\n.. note::\n Since Master Brick firmware version 2.4.4 the key is not returned anymore.\n",
          "de": "\nGibt den Verschl\u00fcsselungsschl\u00fcssel zur\u00fcck, wie von\n:func:`Set Long Wifi Key` gesetzt.\n\n.. note::\n Seit Master Brick Firmware Version 2.4.4 wird der Schl\u00fcssel nicht mehr\n zur\u00fcckgegeben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Key",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Key",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Hostname",
      "function_id": 43,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the hostname of the WIFI Extension. The hostname will be displayed\nby access points as the hostname in the DHCP clients table.\n\nSetting an empty String will restore the default hostname.\n",
          "de": "\nSetzt den Hostnamen der WIFI Extension. Der Hostname wird von\nAccess Points als Hostname in der DHCP Client Tabelle angezeigt.\n\nDas Setzen eines leeren Strings stellt den voreingestellten Hostnamen\nwieder her.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 16,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Hostname",
      "function_id": 44,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the hostname as set by :func:`Set Wifi Hostname`.\n\nAn empty String means, that the default hostname is used.\n",
          "de": "\nGibt den Hostnamen zur\u00fcck, wie von :func:`Set Wifi Hostname` gesetzt.\n\nEin leerer String bedeutet, dass der voreingestellte Hostname\ngenutzt wird.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 16,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Stack Current Callback Period",
      "function_id": 45,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the period with which the :cb:`Stack Current` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\nThe :cb:`Stack Current` callback is only triggered if the current has changed\nsince the last triggering.\n",
          "de": "\nSetzt die Periode mit welcher der :cb:`Stack Current` Callback ausgel\u00f6st\nwird. Ein Wert von 0 deaktiviert den Callback.\n\nDer :cb:`Stack Current` Callback wird nur ausgel\u00f6st, wenn sich die Stromst\u00e4rke\nseit der letzten Ausl\u00f6sung ge\u00e4ndert hat.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Stack Current Callback Period",
      "function_id": 46,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the period as set by :func:`Set Stack Current Callback Period`.\n",
          "de": "\nGibt die Periode zur\u00fcck, wie von :func:`Set Stack Current Callback Period` gesetzt\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Stack Voltage Callback Period",
      "function_id": 47,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the period with which the :cb:`Stack Voltage` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\nThe :cb:`Stack Voltage` callback is only triggered if the voltage has changed\nsince the last triggering.\n",
          "de": "\nSetzt die Periode mit welcher der :cb:`Stack Voltage` Callback ausgel\u00f6st\nwird. Ein Wert von 0 deaktiviert den Callback.\n\nDer :cb:`Stack Voltage` Callback wird nur ausgel\u00f6st, wenn sich die Spannung seit\nder letzten Ausl\u00f6sung ge\u00e4ndert hat.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Stack Voltage Callback Period",
      "function_id": 48,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the period as set by :func:`Set Stack Voltage Callback Period`.\n",
          "de": "\nGibt die Periode zur\u00fcck, wie von :func:`Set Stack Voltage Callback Period` gesetzt\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set USB Voltage Callback Period",
      "function_id": 49,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the period with which the :cb:`USB Voltage` callback is triggered\nperiodically. A value of 0 turns the callback off.\n\nThe :cb:`USB Voltage` callback is only triggered if the voltage has changed\nsince the last triggering.\n",
          "de": "\nSetzt die Periode mit welcher der :cb:`USB Voltage` Callback ausgel\u00f6st\nwird. Ein Wert von 0 deaktiviert den Callback.\n\nDer :cb:`USB Voltage` Callback wird nur ausgel\u00f6st, wenn sich die Spannung seit\nder letzten Ausl\u00f6sung ge\u00e4ndert hat.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get USB Voltage Callback Period",
      "function_id": 50,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the period as set by :func:`Set USB Voltage Callback Period`.\n",
          "de": "\nGibt die Periode zur\u00fcck, wie von :func:`Set USB Voltage Callback Period` gesetzt\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Stack Current Callback Threshold",
      "function_id": 51,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the thresholds for the :cb:`Stack Current Reached` callback.\n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the current is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the current is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the current is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the current is greater than the min value (max is ignored)\"\n",
          "de": "\nSetzt den Schwellwert f\u00fcr den :cb:`Stack Current Reached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st, wenn die Stromst\u00e4rke *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st, wenn die Stromst\u00e4rke *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st, wenn die Stromst\u00e4rke kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st, wenn die Stromst\u00e4rke gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Option",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Option",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": "x",
              "constant_group": {
                "name": "Threshold Option",
                "constants": [
                  {
                    "name": "Off",
                    "value": "x"
                  },
                  {
                    "name": "Outside",
                    "value": "o"
                  },
                  {
                    "name": "Inside",
                    "value": "i"
                  },
                  {
                    "name": "Smaller",
                    "value": "<"
                  },
                  {
                    "name": "Greater",
                    "value": ">"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Min",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Min",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Max",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Stack Current Callback Threshold",
      "function_id": 52,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the threshold as set by :func:`Set Stack Current Callback Threshold`.\n",
          "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`Set Stack Current Callback Threshold` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Option",
          "type": "char",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Option",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": "x",
              "constant_group": {
                "name": "Threshold Option",
                "constants": [
                  {
                    "name": "Off",
                    "value": "x"
                  },
                  {
                    "name": "Outside",
                    "value": "o"
                  },
                  {
                    "name": "Inside",
                    "value": "i"
                  },
                  {
                    "name": "Smaller",
                    "value": "<"
                  },
                  {
                    "name": "Greater",
                    "value": ">"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Min",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Min",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Max",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Stack Voltage Callback Threshold",
      "function_id": 53,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the thresholds for the :cb:`Stack Voltage Reached` callback.\n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the voltage is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the voltage is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the voltage is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the voltage is greater than the min value (max is ignored)\"\n",
          "de": "\nSetzt den Schwellwert f\u00fcr den :cb:`Stack Voltage Reached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Option",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Option",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": "x",
              "constant_group": {
                "name": "Threshold Option",
                "constants": [
                  {
                    "name": "Off",
                    "value": "x"
                  },
                  {
                    "name": "Outside",
                    "value": "o"
                  },
                  {
                    "name": "Inside",
                    "value": "i"
                  },
                  {
                    "name": "Smaller",
                    "value": "<"
                  },
                  {
                    "name": "Greater",
                    "value": ">"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Min",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Min",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Max",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Stack Voltage Callback Threshold",
      "function_id": 54,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the threshold as set by :func:`Set Stack Voltage Callback Threshold`.\n",
          "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`Set Stack Voltage Callback Threshold` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Option",
          "type": "char",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Option",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": "x",
              "constant_group": {
                "name": "Threshold Option",
                "constants": [
                  {
                    "name": "Off",
                    "value": "x"
                  },
                  {
                    "name": "Outside",
                    "value": "o"
                  },
                  {
                    "name": "Inside",
                    "value": "i"
                  },
                  {
                    "name": "Smaller",
                    "value": "<"
                  },
                  {
                    "name": "Greater",
                    "value": ">"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Min",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Min",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Max",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set USB Voltage Callback Threshold",
      "function_id": 55,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the thresholds for the :cb:`USB Voltage Reached` callback.\n\nThe following options are possible:\n\n.. csv-table::\n :header: \"Option\", \"Description\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback is turned off\"\n \"'o'\",    \"Callback is triggered when the voltage is *outside* the min and max values\"\n \"'i'\",    \"Callback is triggered when the voltage is *inside* the min and max values\"\n \"'<'\",    \"Callback is triggered when the voltage is smaller than the min value (max is ignored)\"\n \"'>'\",    \"Callback is triggered when the voltage is greater than the min value (max is ignored)\"\n",
          "de": "\nSetzt den Schwellwert f\u00fcr den :cb:`USB Voltage Reached` Callback.\n\nDie folgenden Optionen sind m\u00f6glich:\n\n.. csv-table::\n :header: \"Option\", \"Beschreibung\"\n :widths: 10, 100\n\n \"'x'\",    \"Callback ist inaktiv\"\n \"'o'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung *au\u00dferhalb* des min und max Wertes ist\"\n \"'i'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung *innerhalb* des min und max Wertes ist\"\n \"'<'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung kleiner als der min Wert ist (max wird ignoriert)\"\n \"'>'\",    \"Callback wird ausgel\u00f6st, wenn die Spannung gr\u00f6\u00dfer als der min Wert ist (max wird ignoriert)\"\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Option",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Option",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": "x",
              "constant_group": {
                "name": "Threshold Option",
                "constants": [
                  {
                    "name": "Off",
                    "value": "x"
                  },
                  {
                    "name": "Outside",
                    "value": "o"
                  },
                  {
                    "name": "Inside",
                    "value": "i"
                  },
                  {
                    "name": "Smaller",
                    "value": "<"
                  },
                  {
                    "name": "Greater",
                    "value": ">"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Min",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Min",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Max",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get USB Voltage Callback Threshold",
      "function_id": 56,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the threshold as set by :func:`Set USB Voltage Callback Threshold`.\n",
          "de": "\nGibt den Schwellwert zur\u00fcck, wie von :func:`Set USB Voltage Callback Threshold` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Option",
          "type": "char",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Option",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": "x",
              "constant_group": {
                "name": "Threshold Option",
                "constants": [
                  {
                    "name": "Off",
                    "value": "x"
                  },
                  {
                    "name": "Outside",
                    "value": "o"
                  },
                  {
                    "name": "Inside",
                    "value": "i"
                  },
                  {
                    "name": "Smaller",
                    "value": "<"
                  },
                  {
                    "name": "Greater",
                    "value": ">"
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Min",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Min",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Max",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Debounce Period",
      "function_id": 57,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nSets the period with which the threshold callbacks\n\n* :cb:`Stack Current Reached`,\n* :cb:`Stack Voltage Reached`,\n* :cb:`USB Voltage Reached`\n\nare triggered, if the thresholds\n\n* :func:`Set Stack Current Callback Threshold`,\n* :func:`Set Stack Voltage Callback Threshold`,\n* :func:`Set USB Voltage Callback Threshold`\n\nkeep being reached.\n",
          "de": "\nSetzt die Periode mit welcher die Schwellwert Callbacks\n\n* :cb:`Stack Current Reached`,\n* :cb:`Stack Voltage Reached`,\n* :cb:`USB Voltage Reached`\n\nausgel\u00f6st werden, wenn die Schwellwerte\n\n* :func:`Set Stack Current Callback Threshold`,\n* :func:`Set Stack Voltage Callback Threshold`,\n* :func:`Set USB Voltage Callback Threshold`\n\nweiterhin erreicht bleiben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Debounce",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Debounce",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 100,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Debounce Period",
      "function_id": 58,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the debounce period as set by :func:`Set Debounce Period`.\n",
          "de": "\nGibt die Entprellperiode zur\u00fcck, wie von :func:`Set Debounce Period` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Debounce",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Debounce",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 100,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "Stack Current",
      "function_id": 59,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set Stack Current Callback Period`. The :word:`parameter` is the current\nof the sensor.\n\nThe :cb:`Stack Current` callback is only triggered if the current has changed\nsince the last triggering.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set Stack Current Callback Period`, ausgel\u00f6st. Der :word:`parameter` ist\ndie Stromst\u00e4rke des Sensors.\n\nDer :cb:`Stack Current` Callback wird nur ausgel\u00f6st, wenn sich die Stromst\u00e4rke\nseit der letzten Ausl\u00f6sung ge\u00e4ndert hat.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Current",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Current",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "Stack Voltage",
      "function_id": 60,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set Stack Voltage Callback Period`. The :word:`parameter` is the voltage\nof the sensor.\n\nThe :cb:`Stack Voltage` callback is only triggered if the voltage has changed\nsince the last triggering.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set Stack Voltage Callback Period`, ausgel\u00f6st. Der :word:`parameter`\nist die Spannung des Sensors.\n\nDer :cb:`Stack Voltage` Callback wird nur ausgel\u00f6st, wenn sich die Spannung seit\nder letzten Ausl\u00f6sung ge\u00e4ndert hat.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Voltage",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Voltage",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "USB Voltage",
      "function_id": 61,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set USB Voltage Callback Period`. The :word:`parameter` is the USB\nvoltage.\n\nThe :cb:`USB Voltage` callback is only triggered if the USB voltage has changed\nsince the last triggering.\n\nDoes not work with hardware version 2.1 or newer.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set USB Voltage Callback Period`, ausgel\u00f6st. Der :word:`parameter` ist\ndie USB Spannung.\n\nDer :cb:`USB Voltage` Callback wird nur ausgel\u00f6st, wenn sich die USB Spannung\nseit der letzten Ausl\u00f6sung ge\u00e4ndert hat.\n\nFunktioniert nicht mit Hardware Version 2.1 oder neuer.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Voltage",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Voltage",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "Stack Current Reached",
      "function_id": 62,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered when the threshold as set by\n:func:`Set Stack Current Callback Threshold` is reached.\nThe :word:`parameter` is the stack current.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`Set Debounce Period`.\n",
          "de": "\nDieser Callback wird ausgel\u00f6st, wenn der Schwellwert, wie von\n:func:`Set Stack Current Callback Threshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist der Stromverbrauch des Stapels.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`Set Debounce Period` gesetzt, ausgel\u00f6st.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Current",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Current",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Ampere",
                  "de": "Ampere"
                },
                "symbol": "A",
                "usage": {
                  "en": "Electric current",
                  "de": "Elektrische Stromst\u00e4rke"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "Stack Voltage Reached",
      "function_id": 63,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered when the threshold as set by\n:func:`Set Stack Voltage Callback Threshold` is reached.\nThe :word:`parameter` is the stack voltage.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`Set Debounce Period`.\n",
          "de": "\nDieser Callback wird ausgel\u00f6st, wenn der Schwellwert, wie von\n:func:`Set Stack Voltage Callback Threshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Spannung des Stapels.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`Set Debounce Period` gesetzt, ausgel\u00f6st.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Voltage",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Voltage",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "USB Voltage Reached",
      "function_id": 64,
      "since_firmware": [
        2,
        0,
        5
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered when the threshold as set by\n:func:`Set USB Voltage Callback Threshold` is reached.\nThe :word:`parameter` is the voltage of the sensor.\n\nIf the threshold keeps being reached, the callback is triggered periodically\nwith the period as set by :func:`Set Debounce Period`.\n",
          "de": "\nDieser Callback wird ausgel\u00f6st, wenn der Schwellwert, wie von\n:func:`Set USB Voltage Callback Threshold` gesetzt, erreicht wird.\nDer :word:`parameter` ist die Spannung des Sensors.\n\nWenn der Schwellwert erreicht bleibt, wird der Callback mit der Periode, wie\nmit :func:`Set Debounce Period` gesetzt, ausgel\u00f6st.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Voltage",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Voltage",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Volt",
                  "de": "Volt"
                },
                "symbol": "V",
                "usage": {
                  "en": "Electric potential",
                  "de": "Elektrische Spannung"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is Ethernet Present",
      "function_id": 65,
      "since_firmware": [
        2,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the Master Brick is at position 0 in the stack and an Ethernet\nExtension is available.\n",
          "de": "\nGibt *true* zur\u00fcck, wenn der Master Brick an Position 0 im Stapel und eine\nEthernet Extension verf\u00fcgbar ist.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Present",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Present",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Ethernet Configuration",
      "function_id": 66,
      "since_firmware": [
        2,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the configuration of the Ethernet Extension. Possible values for\n``connection`` are:\n\n.. csv-table::\n :header: \"Value\", \"Description\"\n :widths: 10, 90\n\n \"0\", \"DHCP\"\n \"1\", \"Static IP\"\n\nIf you set ``connection`` to static IP options then you have to supply ``ip``,\n``subnet_mask`` and ``gateway`` as an array of size 4 (first element of the\narray is the least significant byte of the address). If ``connection`` is set\nto the DHCP options then ``ip``, ``subnet_mask`` and ``gateway`` are ignored,\nyou can set them to 0.\n\nThe last parameter is the port that your program will connect to.\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n\nIt is recommended to use the Brick Viewer to set the Ethernet configuration.\n",
          "de": "\nSetzt die Konfiguration der Ethernet Extension. M\u00f6gliche Werte f\u00fcr\n``connection`` sind:\n\n.. csv-table::\n :header: \"Wert\", \"Beschreibung\"\n :widths: 10, 90\n\n \"0\", \"DHCP\"\n \"1\", \"Statische IP\"\n\nWenn ``connection`` auf die statische IP Option gesetzt wird, dann m\u00fcssen\n``ip``, ``subnet_mask`` und ``gateway`` als ein Array der Gr\u00f6\u00dfe 4 angegeben\nwerden. Dabei ist das erste Element im Array das niederwertigste Byte. Falls\n``connection`` auf die DHCP Option gesetzt ist, werden ``ip``, ``subnet_mask``\nund ``gateway`` ignoriert.\n\nDer letzte Parameter ist der Port auf den das Anwendungsprogramm sich\nverbindet.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt.\nDas bedeutet der Master Brick muss nach einer Konfiguration neu gestartet\nwerden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Ethernet Extension zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Connection",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connection",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Ethernet Connection",
                "constants": [
                  {
                    "name": "DHCP",
                    "value": 0
                  },
                  {
                    "name": "Static IP",
                    "value": 1
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4223,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Ethernet Configuration",
      "function_id": 67,
      "since_firmware": [
        2,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set Ethernet Configuration`.\n",
          "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`Set Ethernet Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Connection",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connection",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Ethernet Connection",
                "constants": [
                  {
                    "name": "DHCP",
                    "value": 0
                  },
                  {
                    "name": "Static IP",
                    "value": 1
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4223,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Ethernet Status",
      "function_id": 68,
      "since_firmware": [
        2,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the status of the Ethernet Extension.\n\n``mac_address``, ``ip``, ``subnet_mask`` and ``gateway`` are given as an array.\nThe first element of the array is the least significant byte of the address.\n\n``rx_count`` and ``tx_count`` are the number of bytes that have been\nreceived/send since last restart.\n\n``hostname`` is the currently used hostname.\n",
          "de": "\nGibt den Status der Ethernet Extension zur\u00fcck.\n\n``mac_address``, ``ip``, ``subnet_mask`` und ``gateway`` werden als Array\n\u00fcbergeben. Das erste Element des Arrays ist das niederwertigste Byte.\n\n``rx_count`` und ``tx_count`` sind die Anzahl der Bytes die seit dem letzten\nNeustart empfangen/gesendet wurden.\n\n``hostname`` ist der aktuell genutzte Hostname.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "RX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "RX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "TX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "TX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Ethernet Hostname",
      "function_id": 69,
      "since_firmware": [
        2,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the hostname of the Ethernet Extension. The hostname will be displayed\nby access points as the hostname in the DHCP clients table.\n\nSetting an empty String will restore the default hostname.\n\nThe current hostname can be discovered with :func:`Get Ethernet Status`.\n",
          "de": "\nSetzt den Hostnamen der Ethernet Extension. Der Hostname wird von\nAccess Points als Hostname in der DHCP Client Tabelle angezeigt.\n\nDas setzen eines leeren Strings stellt den voreingestellten Hostnamen\nwieder her.\n\nDer aktuelle Hostname kann mit :func:`Get Ethernet Status` herausgefunden werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Ethernet MAC Address",
      "function_id": 70,
      "since_firmware": [
        2,
        1,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the MAC address of the Ethernet Extension. The Ethernet Extension should\ncome configured with a valid MAC address, that is also written on a\nsticker of the extension itself.\n\nThe MAC address can be read out again with :func:`Get Ethernet Status`.\n",
          "de": "\nSetzt die MAC Adresse der Ethernet Extension. Die Ethernet Extension sollte\nmit einer vorkonfigurierten MAC Adresse ausgeliefert werden. Diese MAC Adresse\nsteht auch auf einem Aufkleber auf der Ethernet Extension.\n\nDie MAC Adresse kann mit :func:`Get Ethernet Status` wieder ausgelesen werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Ethernet Websocket Configuration",
      "function_id": 71,
      "since_firmware": [
        2,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the Ethernet WebSocket configuration. The first parameter sets the number of socket\nconnections that are reserved for WebSockets. The range is 0-7. The connections\nare shared with the plain sockets. Example: If you set the connections to 3,\nthere will be 3 WebSocket and 4 plain socket connections available.\n\nThe second parameter is the port for the WebSocket connections. The port can\nnot be the same as the port for the plain socket connections.\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n\nIt is recommended to use the Brick Viewer to set the Ethernet configuration.\n",
          "de": "\nSetzt die Ethernet WebSocket-Konfiguration. Der erste Parameter setzt\ndie Anzahl der Socket-Verbindungen die f\u00fcr WebSockets reserviert werden.\nDer m\u00f6gliche Wertebereich ist 0-7. Die Verbindungen werden zwischen den\nnormalen Sockets und den WebSockets aufgeteilt. Beispiel: Wenn die Socket-Verbindungen auf 3\ngesetzt werden, stehen 3 WebSockets und 4 normale Sockets zur Verf\u00fcgung.\n\nDer zweite Parameter ist der Port f\u00fcr die WebSocket-Verbindungen. Der Port\nkann nicht der gleiche sein wie der Port des normalen Sockets.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt.\nDas bedeutet der Master Brick muss nach einer Konfiguration neu gestartet\nwerden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Ethernet Extension zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Sockets",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Sockets",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 7
                }
              ],
              "default": 3,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4280,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Ethernet Websocket Configuration",
      "function_id": 72,
      "since_firmware": [
        2,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set Ethernet Configuration`.\n",
          "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`Set Ethernet Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Sockets",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Sockets",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 7
                }
              ],
              "default": 3,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4280,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Ethernet Authentication Secret",
      "function_id": 73,
      "since_firmware": [
        2,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the Ethernet authentication secret. The secret can be a string of up to 64\ncharacters. An empty string disables the authentication.\n\nSee the :ref:`authentication tutorial <tutorial_authentication>` for more\ninformation.\n\nThe secret is stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n\nIt is recommended to use the Brick Viewer to set the Ethernet authentication secret.\n\nThe default value is an empty string (authentication disabled).\n",
          "de": "\nSetzt das Authentifizierungsgeheimnis. Das Geheimnis ist ein String aus bis zu\n64 Buchstaben. Ein leerer String deaktiviert die Authentifizierung.\n\nF\u00fcr mehr Informationen zur Authentifizierung siehe das dazugeh\u00f6rige\n:ref:`Tutorial <tutorial_authentication>`.\n\nDas Authentifizierungsgehemnis wird im EEPROM gespeichert und nur beim Start angewandt.\nDas bedeutet der Master Brick muss nach einer Konfiguration neu gestartet\nwerden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Authentifizierung der Ethernet\nExtension einzurichten.\n\nDer Standardwert ist ein leerer String (Authentifizierung deaktiviert).\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Secret",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Secret",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": "",
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Ethernet Authentication Secret",
      "function_id": 74,
      "since_firmware": [
        2,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the authentication secret as set by\n:func:`Set Ethernet Authentication Secret`.\n",
          "de": "\nGibt das Authentifizierungsgeheimnis zur\u00fcck, wie von\n:func:`Set Ethernet Authentication Secret` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Secret",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Secret",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": "",
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi Authentication Secret",
      "function_id": 75,
      "since_firmware": [
        2,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the WIFI authentication secret. The secret can be a string of up to 64\ncharacters. An empty string disables the authentication.\n\nSee the :ref:`authentication tutorial <tutorial_authentication>` for more\ninformation.\n\nThe secret is stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n\nIt is recommended to use the Brick Viewer to set the WIFI authentication secret.\n\nThe default value is an empty string (authentication disabled).\n",
          "de": "\nSetzt das Authentifizierungsgeheimnis. Das Geheimnis ist ein String aus bis zu\n64 Buchstaben. Ein leerer String deaktiviert die Authentifizierung.\n\nF\u00fcr mehr Informationen zur Authentifizierung siehe das dazugeh\u00f6rige\n:ref:`Tutorial <tutorial_authentication>`.\n\nDas Authentifizierungsgehemnis wird im EEPROM gespeichert und nur beim Start\nangewandt. Das bedeutet der Master Brick muss nach einer Konfiguration neu\ngestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Authentifizierung der WIFI\nExtension einzurichten.\n\nDer Standardwert ist ein leerer String (Authentifizierung deaktiviert).\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Secret",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Secret",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": "",
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi Authentication Secret",
      "function_id": 76,
      "since_firmware": [
        2,
        2,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the authentication secret as set by\n:func:`Set Wifi Authentication Secret`.\n",
          "de": "\nGibt das Authentifizierungsgeheimnis zur\u00fcck, wie von\n:func:`Set Wifi Authentication Secret` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Secret",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Secret",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": "",
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Connection Type",
      "function_id": 77,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the type of the connection over which this function was called.\n",
          "de": "\nGibt den Typ der Verbingung zur\u00fcck, \u00fcber welche diese Funktion aufgerufen wurde.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Connection Type",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connection Type",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Connection Type",
                "constants": [
                  {
                    "name": "None",
                    "value": 0
                  },
                  {
                    "name": "USB",
                    "value": 1
                  },
                  {
                    "name": "SPI Stack",
                    "value": 2
                  },
                  {
                    "name": "Chibi",
                    "value": 3
                  },
                  {
                    "name": "RS485",
                    "value": 4
                  },
                  {
                    "name": "Wifi",
                    "value": 5
                  },
                  {
                    "name": "Ethernet",
                    "value": 6
                  },
                  {
                    "name": "Wifi2",
                    "value": 7
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is Wifi2 Present",
      "function_id": 78,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the Master Brick is at position 0 in the stack and a WIFI\nExtension 2.0 is available.\n",
          "de": "\nGibt *true* zur\u00fcck, wenn der Master Brick an Position 0 im Stapel und eine\nWIFI Extension 2.0 verf\u00fcgbar ist.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Present",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Present",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Start Wifi2 Bootloader",
      "function_id": 79,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nStarts the bootloader of the WIFI Extension 2.0. Returns 0 on success.\nAfterwards the :func:`Write Wifi2 Serial Port` and :func:`Read Wifi2 Serial Port`\nfunctions can be used to communicate with the bootloader to flash a new\nfirmware.\n\nThe bootloader should only be started over a USB connection. It cannot be\nstarted over a WIFI2 connection, see the :func:`Get Connection Type` function.\n\nIt is recommended to use the Brick Viewer to update the firmware of the WIFI\nExtension 2.0.\n",
          "de": "\nStartet den Bootloader der WIFI Extension 2.0. Gibt bei Erfolg 0 zur\u00fcck.\nDanach k\u00f6nnen die :func:`Write Wifi2 Serial Port` und :func:`Read Wifi2 Serial Port`\nFunktionen zur Kommunikation mit dem Bootloader verwendet werden, um eine neue\nFirmware zu flashen.\n\nDer Bootloader sollte nur \u00fcber eine USB Verbindung gestartet werden. Er kann\nnicht \u00fcber eine WIFI2 Verbindung gestartet werden, siehe die\n:func:`Get Connection Type` Funktion.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Firmware der WIFI\nExtension 2.0 zu aktualisieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Result",
          "type": "int8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Result",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Write Wifi2 Serial Port",
      "function_id": 80,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nWrites up to 60 bytes (number of bytes to be written specified by ``length``)\nto the serial port of the bootloader of the WIFI Extension 2.0. Returns 0 on\nsuccess.\n\nBefore this function can be used the bootloader has to be started using the\n:func:`Start Wifi2 Bootloader` function.\n\nIt is recommended to use the Brick Viewer to update the firmware of the WIFI\nExtension 2.0.\n",
          "de": "\nSchreibt bis zu 60 Bytes (Anzahl zu schreibender Bytes mit ``length`` angeben)\nauf die serielle Schnittstelle des Bootloaders der WIFI Extension 2.0. Gibt\nbei Erfolg 0 zur\u00fcck.\n\nBevor diese Funktion genutzt werden kann muss der Bootloader mit der\n:func:`Start Wifi2 Bootloader` Funktion gestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Firmware der WIFI\nExtension 2.0 zu aktualisieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 60,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Length",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 0,
                  "maximum": 60
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Result",
          "type": "int8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Result",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Read Wifi2 Serial Port",
      "function_id": 81,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReads up to 60 bytes (number of bytes to be read specified by ``length``)\nfrom the serial port of the bootloader of the WIFI Extension 2.0.\nReturns the number of actually read bytes.\n\nBefore this function can be used the bootloader has to be started using the\n:func:`Start Wifi2 Bootloader` function.\n\nIt is recommended to use the Brick Viewer to update the firmware of the WIFI\nExtension 2.0.\n",
          "de": "\nLiest bis zu 60 Bytes (Anzahl zu lesender Bytes mit ``length`` angegeben) von\nder seriellen Schnittstelle des Bootloaders der WIFI Extension 2.0. Gibt die\nAnzahl der wirklich gelesenen Bytes zur\u00fcck.\n\nBevor diese Funktion genutzt werden kann muss der Bootloader mit der\n:func:`Start Wifi2 Bootloader` Funktion gestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die Firmware der WIFI\nExtension 2.0 zu aktualisieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Length",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 60,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 60
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Result",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Result",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Authentication Secret",
      "function_id": 82,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the WIFI authentication secret. The secret can be a string of up to 64\ncharacters. An empty string disables the authentication. The default value is\nan empty string (authentication disabled).\n\nSee the :ref:`authentication tutorial <tutorial_authentication>` for more\ninformation.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt das WLAN-Authentifizierungsgeheimnis. Das Geheimnis ist ein String aus\nbis zu 64 Buchstaben. Ein leerer String deaktiviert die Authentifizierung. Der\nStandardwert ist ein leerer String (Authentifizierung deaktiviert).\n\nF\u00fcr mehr Informationen zur Authentifizierung siehe das dazugeh\u00f6rige\n:ref:`Tutorial <tutorial_authentication>`.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Secret",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Secret",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Authentication Secret",
      "function_id": 83,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the WIFI authentication secret as set by\n:func:`Set Wifi2 Authentication Secret`.\n",
          "de": "\nGibt das WLAN-Authentifizierungsgeheimnis zur\u00fcck, wie von\n:func:`Set Wifi2 Authentication Secret` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Secret",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Secret",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Configuration",
      "function_id": 84,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the general configuration of the WIFI Extension 2.0.\n\nThe ``port`` parameter sets the port number that your programm will connect\nto.\n\nThe ``websocket_port`` parameter sets the WebSocket port number that your\nJavaScript programm will connect to.\n\nThe ``website_port`` parameter sets the port number for the website of the\nWIFI Extension 2.0.\n\nThe ``phy_mode`` parameter sets the specific wireless network mode to be used.\nPossible values are B, G and N.\n\nThe ``sleep_mode`` parameter is currently unused.\n\nThe ``website`` parameter is used to enable or disable the web interface of\nthe WIFI Extension 2.0, which is available from firmware version 2.0.1. Note\nthat, for firmware version 2.0.3 and older, to disable the the web interface\nthe ``website_port`` parameter must be set to 1 and greater than 1 to enable\nthe web interface. For firmware version 2.0.4 and later, setting this parameter\nto 1 will enable the web interface and setting it to 0 will disable the web\ninterface.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt die allgemeine Konfiguration der WIFI Extension 2.0.\n\nDer ``port`` Parameter setzt die Portnummer auf die sich das Anwendungsprogramm\nverbindet.\n\nDer ``websocket_port`` Parameter setzt die WebSocket-Portnummer auf die sich das\nJavaScript Anwendungsprogramm verbindet.\n\nDer ``website_port`` Parameter setzt die Portnummer f\u00fcr die Webseite der\nWIFI Extension 2.0.\n\nDer ``phy_mode`` Parameter setzt den zu verwendenden WLAN-Modus. M\u00f6gliche Werte\nsinf B, G und N.\n\nDie ``sleep_mode`` und ``website`` Parameter werden momentan nicht verwendet.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4223,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Websocket Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Websocket Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4280,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Website Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Website Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 80,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "PHY Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "PHY Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi2 PHY Mode",
                "constants": [
                  {
                    "name": "B",
                    "value": 0
                  },
                  {
                    "name": "G",
                    "value": 1
                  },
                  {
                    "name": "N",
                    "value": 2
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Sleep Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Sleep Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Website",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Website",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Configuration",
      "function_id": 85,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the general configuration as set by :func:`Set Wifi2 Configuration`.\n",
          "de": "\nGibt die allgemeine Konfiguration zur\u00fcck, wie von :func:`Set Wifi2 Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4223,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Websocket Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Websocket Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 4280,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Website Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Website Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 80,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "PHY Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "PHY Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi2 PHY Mode",
                "constants": [
                  {
                    "name": "B",
                    "value": 0
                  },
                  {
                    "name": "G",
                    "value": 1
                  },
                  {
                    "name": "N",
                    "value": 2
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Sleep Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Sleep Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Website",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Website",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Status",
      "function_id": 86,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the client and access point status of the WIFI Extension 2.0.\n",
          "de": "\nGibt den Client und Access Point Status der WIFI Extension 2.0 zur\u00fcck.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Client Enabled",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client Enabled",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client Status",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client Status",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi2 Client Status",
                "constants": [
                  {
                    "name": "Idle",
                    "value": 0
                  },
                  {
                    "name": "Connecting",
                    "value": 1
                  },
                  {
                    "name": "Wrong Password",
                    "value": 2
                  },
                  {
                    "name": "No AP Found",
                    "value": 3
                  },
                  {
                    "name": "Connect Failed",
                    "value": 4
                  },
                  {
                    "name": "Got IP",
                    "value": 5
                  },
                  {
                    "name": "Unknown",
                    "value": 255
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client RX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client RX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client TX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client TX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Client RSSI",
          "type": "int8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Client RSSI",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP Enabled",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP Enabled",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP RX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP RX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP TX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP TX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "AP Connected Count",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "AP Connected Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Client Configuration",
      "function_id": 87,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the client specific configuration of the WIFI Extension 2.0.\n\nThe ``enable`` parameter enables or disables the client part of the\nWIFI Extension 2.0.\n\nThe ``ssid`` parameter sets the SSID (up to 32 characters) of the access point\nto connect to.\n\nIf the ``ip`` parameter is set to all zero then ``subnet_mask`` and ``gateway``\nparameters are also set to all zero and DHCP is used for IP address configuration.\nOtherwise those three parameters can be used to configure a static IP address.\nThe default configuration is DHCP.\n\nIf the ``mac_address`` parameter is set to all zero then the factory MAC\naddress is used. Otherwise this parameter can be used to set a custom MAC\naddress.\n\nIf the ``bssid`` parameter is set to all zero then WIFI Extension 2.0 will\nconnect to any access point that matches the configured SSID. Otherwise this\nparameter can be used to make the WIFI Extension 2.0 only connect to an\naccess point if SSID and BSSID match.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt die Client-spezifische Konfiguration der WIFI Extension 2.0.\n\nDer ``enable`` Parameter aktiviert oder deaktiviert den Client-Teil der\nWIFI Extension 2.0. Der Standardwert ist *true*.\n\nDer ``ssid`` Parameter die SSID (bis zu 32 Zeichen) des Access Points zu dem\ndie WLAN Verbindung hergestellt werden soll.\n\nWenn die ``ip``, ``subnet_mask`` und ``gateway`` Parameter alle auf Null gesetzt\nsind, dann wird DHCP verwendet. Andernfalls kann mit diese drei Parametern eine\nstatische IP Adresse eingestellt werden. Die Standardeinstellung ist DHCP.\n\nWenn der ``mac_address`` Parameter auf Null gesetzt ist, dann wird die\nvoreingestellt MAC Adresse verwendet. Andernfalls kann mit diesem Parameter\neine eigene MAC Adresse eingestellt werden.\n\nWenn der ``bssid`` Parameter auf Null gesetzt ist, dann verbindet sich die\nWIFI Extension 2.0 mit einem Access Point wenn die eingestellt SSID\n\u00fcbereinstimmt. Andernfalls kann dieses Parameter verwendet werden, damit sich\ndie WIFI Extension 2.0 nur dann mit einem Access Point verbindet, wenn SSID\nund BSSID \u00fcbereinstimmen.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "BSSID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "BSSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Client Configuration",
      "function_id": 88,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the client configuration as set by :func:`Set Wifi2 Client Configuration`.\n",
          "de": "\nGibt die Client Konfiguration zur\u00fcck, wie von\n:func:`Set Wifi2 Client Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "BSSID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "BSSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Client Hostname",
      "function_id": 89,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the client hostname (up to 32 characters) of the WIFI Extension 2.0. The\nhostname will be displayed by access points as the hostname in the DHCP clients\ntable.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt den Client Hostnamen (bis zu 32 Zeichen) der WIFI Extension 2.0. Der\nHostname wird von Access Points als Hostname in der DHCP Client Tabelle angezeigt.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Client Hostname",
      "function_id": 90,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the client hostname as set by :func:`Set Wifi2 Client Hostname`.\n",
          "de": "\nGibt den Client Hostnamen zur\u00fcck, wie von :func:`Set Wifi2 Client Hostname` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Client Password",
      "function_id": 91,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the client password (up to 63 chars) for WPA/WPA2 encryption.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt das Client-Passwort (bis zu 63 Zeichen) f\u00fcr WPA/WPA2 Verschl\u00fcsselung.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Password",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Password",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Client Password",
      "function_id": 92,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the client password as set by :func:`Set Wifi2 Client Password`.\n\n.. note::\n Since WIFI Extension 2.0 firmware version 2.1.3 the password is not\n returned anymore.\n",
          "de": "\nGibt das Client-Passwort zur\u00fcck, wie von :func:`Set Wifi2 Client Password` gesetzt.\n\n.. note::\n Seit WIFI Extension 2.0 Firmware Version 2.1.3 wird das Passwort\n nicht mehr zur\u00fcckgegeben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Password",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Password",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 AP Configuration",
      "function_id": 93,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the access point specific configuration of the WIFI Extension 2.0.\n\nThe ``enable`` parameter enables or disables the access point part of the\nWIFI Extension 2.0.\n\nThe ``ssid`` parameter sets the SSID (up to 32 characters) of the access point.\n\nIf the ``ip`` parameter is set to all zero then ``subnet_mask`` and ``gateway``\nparameters are also set to all zero and DHCP is used for IP address configuration.\nOtherwise those three parameters can be used to configure a static IP address.\nThe default configuration is DHCP.\n\nThe ``encryption`` parameter sets the encryption mode to be used. Possible\nvalues are Open (no encryption), WEP or WPA/WPA2 PSK.\nUse the :func:`Set Wifi2 AP Password` function to set the encryption\npassword.\n\nThe ``hidden`` parameter makes the access point hide or show its SSID.\n\nThe ``channel`` parameter sets the channel (1 to 13) of the access point.\n\nIf the ``mac_address`` parameter is set to all zero then the factory MAC\naddress is used. Otherwise this parameter can be used to set a custom MAC\naddress.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt die Access-Point-spezifische Konfiguration der WIFI Extension 2.0.\n\nDer ``enable`` Parameter aktiviert oder deaktiviert den Access-Point-Teil der\nWIFI Extension 2.0. Der Standardwert ist *true*.\n\nDer ``ssid`` Parameter die SSID (bis zu 32 Zeichen) des Access Points.\n\nWenn die ``ip``, ``subnet_mask`` und ``gateway`` Parameter alle auf Null gesetzt\nsind, dann wird ein DHCP Server aktiviert. Andernfalls kann mit diese drei\nParametern eine statische IP Adresse eingestellt werden. Die Standardeinstellung\nist DHCP.\n\nDer ``encryption`` Parameter legt den Verschl\u00fcsselungsmodus fest. M\u00f6gliche Werte\nsind Open (keine  Verschl\u00fcsselung), WEP oder WPA/WPA2 PSK.\nMit der :func:`Set Wifi2 AP Password` Kann das\nVerschl\u00fcsselungspasswort gesetzt werden.\n\nDer ``hidden`` Parameter legt fest, oder der Access Point seine SSID versteckt\noder zeigt.\n\nDer ``channel`` Parameter gibt den Kanal (1 to 13) des Access Points and.\n\nWenn der ``mac_address`` Parameter auf Null gesetzt ist, dann wird die\nvoreingestellt MAC Adresse verwendet. Andernfalls kann mit diesem Parameter\neine eigene MAC Adresse eingestellt werden.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": [
                0,
                0,
                0,
                0
              ],
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Encryption",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Encryption",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 4,
              "constant_group": {
                "name": "Wifi2 AP Encryption",
                "constants": [
                  {
                    "name": "Open",
                    "value": 0
                  },
                  {
                    "name": "WEP",
                    "value": 1
                  },
                  {
                    "name": "WPA PSK",
                    "value": 2
                  },
                  {
                    "name": "WPA2 PSK",
                    "value": 3
                  },
                  {
                    "name": "WPA WPA2 PSK",
                    "value": 4
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Hidden",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hidden",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Channel",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Channel",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 1,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 AP Configuration",
      "function_id": 94,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the access point configuration as set by :func:`Set Wifi2 AP Configuration`.\n",
          "de": "\nGibt die Access-Point-Konfiguration zur\u00fcck, wie von\n:func:`Set Wifi2 AP Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": [
                0,
                0,
                0,
                0
              ],
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Encryption",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Encryption",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 4,
              "constant_group": {
                "name": "Wifi2 AP Encryption",
                "constants": [
                  {
                    "name": "Open",
                    "value": 0
                  },
                  {
                    "name": "WEP",
                    "value": 1
                  },
                  {
                    "name": "WPA PSK",
                    "value": 2
                  },
                  {
                    "name": "WPA2 PSK",
                    "value": 3
                  },
                  {
                    "name": "WPA WPA2 PSK",
                    "value": 4
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Hidden",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hidden",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Channel",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Channel",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": 1,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 AP Password",
      "function_id": 95,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the access point password (at least 8 and up to 63 chars) for the configured encryption\nmode, see :func:`Set Wifi2 AP Configuration`.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nSetzt das Access-Point-Passwort (mindestens 8 und bis zu 63 Zeichen) f\u00fcr den eingestellten\nVerschl\u00fcsselungsmodus, siehe :func:`Set Wifi2 AP Configuration`.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Password",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Password",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 AP Password",
      "function_id": 96,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the access point password as set by :func:`Set Wifi2 AP Password`.\n\n.. note::\n Since WIFI Extension 2.0 firmware version 2.1.3 the password is not\n returned anymore.\n",
          "de": "\nGibt das Access-Point-Passwort zur\u00fcck, wie von :func:`Set Wifi2 AP Password` gesetzt.\n\n.. note::\n Seit WIFI Extension 2.0 Firmware Version 2.1.3 wird das Passwort\n nicht mehr zur\u00fcckgegeben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Password",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Password",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Save Wifi2 Configuration",
      "function_id": 97,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nAll configuration functions for the WIFI Extension 2.0 do not change the\nvalues permanently. After configuration this function has to be called to\npermanently store the values.\n\nThe values are stored in the EEPROM and only applied on startup. That means\nyou have to restart the Master Brick after configuration.\n",
          "de": "\nAlle Konfigurationsfunktionen der WIFI Extension 2.0 \u00e4ndern die Werte nicht\ndauerhaft. Nach einer Konfiguration muss diese Funktion aufgerufen werden, um\ndie Werte dauerhaft zu speichern.\n\nDie Werte sind im EEPROM gespeichert und werden nur beim Start angewandt.\nDas bedeutet der Master Brick muss nach einer Konfiguration neu gestartet\nwerden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Result",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Result",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Firmware Version",
      "function_id": 98,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the current version of the WIFI Extension 2.0 firmware.\n",
          "de": "\nGibt die aktuelle Version der WIFI Extension 2.0 Firmware zur\u00fcck.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Firmware Version",
          "type": "uint8",
          "cardinality": 3,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": 0,
              "name": "Major",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 1,
              "name": "Minor",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 2,
              "name": "Revision",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Enable Wifi2 Status LED",
      "function_id": 99,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nTurns the green status LED of the WIFI Extension 2.0 on.\n",
          "de": "\nAktiviert die gr\u00fcne Status LED der WIFI Extension 2.0.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Disable Wifi2 Status LED",
      "function_id": 100,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nTurns the green status LED of the WIFI Extension 2.0 off.\n",
          "de": "\nDeaktiviert die gr\u00fcne Status LED der WIFI Extension 2.0.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is Wifi2 Status LED Enabled",
      "function_id": 101,
      "since_firmware": [
        2,
        4,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the green status LED of the WIFI Extension 2.0 is turned on.\n",
          "de": "\nGibt *true* zur\u00fcck falls die gr\u00fcne Status LED der WIFI Extension 2.0 aktiviert ist.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enabled",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enabled",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Mesh Configuration",
      "function_id": 102,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nSets the mesh specific configuration of the WIFI Extension 2.0.\n\nThe ``enable`` parameter enables or disables the mesh part of the\nWIFI Extension 2.0. The mesh part cannot be\nenabled together with the client and access-point part.\n\nIf the ``root_ip`` parameter is set to all zero then ``root_subnet_mask``\nand ``root_gateway`` parameters are also set to all zero and DHCP is used for\nIP address configuration. Otherwise those three parameters can be used to\nconfigure a static IP address. The default configuration is DHCP.\n\nIf the ``router_bssid`` parameter is set to all zero then the information is\ntaken from Wi-Fi scan when connecting the SSID as set by\n:func:`Set Wifi2 Mesh Router SSID`. This only works if the the SSID is not hidden.\nIn case the router has hidden SSID this parameter must be specified, otherwise\nthe node will not be able to reach the mesh router.\n\nThe ``group_id`` and the ``group_ssid_prefix`` parameters identifies a\nparticular mesh network and nodes configured with same ``group_id`` and the\n``group_ssid_prefix`` are considered to be in the same mesh network.\n\nThe ``gateway_ip`` and the ``gateway_port`` parameters specifies the location\nof the brickd that supports mesh feature.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nSet die Mesh-Konfiguration der WIFI Extension 2.0.\n\nDer ``enable`` Parameter aktiviert oder deaktiviert den Mesh-Teil der\nWIFI Extension 2.0. Der Mesh-Teil kann nicht\nzusammen mit dem Client- und Access-Point-Teil aktiviert werden.\n\nWenn die ``root_ip``, ``root_subnet_mask`` und ``root_gateway`` Parameter alle\nauf Null gesetzt sind, dann wird DHCP verwendet. Andernfalls kann mit diese\ndrei Parametern eine statische IP Adresse eingestellt werden. Die\nStandardeinstellung ist DHCP.\n\nWenn der ``router_bssid`` Parameter auf Null gesetzt ist, dann verbindet sich\ndie WIFI Extension 2.0 mit einem Access Point wenn die eingestellt SSID\n\u00fcbereinstimmt, siehe :func:`Set Wifi2 Mesh Router SSID`. Andernfalls kann dieses\nParameter verwendet werden, damit sich die WIFI Extension 2.0 nur dann mit\neinem Access Point verbindet, wenn SSID und BSSID \u00fcbereinstimmen. Die BSSID\nkann auch verwendet werden, um eine Verbindung mit einer verstecken SSID\nherzustellen.\n\nDie ``group_id`` und ``group_ssid_prefix`` Parameter identifizieren in bestimmtes\nMesh-Netzwerk und alle WIFI Extension 2.0 mit der gleichen Gruppeneinstellung\ngeh\u00f6ren um gleichen Mesh-Netzwerk.\n\nDie ``gateway_ip`` und ``gateway_port`` Parameter geben an, wie der Mesh-Gateway\n(brickd) erreicht werden kann.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": [
                0,
                0,
                0,
                0
              ],
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Router BSSID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Router BSSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Group ID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Group ID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Group SSID Prefix",
          "type": "string",
          "cardinality": 16,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Group SSID Prefix",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Mesh Configuration",
      "function_id": 103,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nReturns the mesh configuration as set by :func:`Set Wifi2 Mesh Configuration`.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nGibt das Mesh Konfiguration zur\u00fcck, wie von :func:`Set Wifi2 Mesh Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": [
                0,
                0,
                0,
                0
              ],
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Router BSSID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Router BSSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Group ID",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Group ID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Group SSID Prefix",
          "type": "string",
          "cardinality": 16,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Group SSID Prefix",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway Port",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Mesh Router SSID",
      "function_id": 104,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nSets the mesh router SSID of the WIFI Extension 2.0.\nIt is used to specify the mesh router to connect to.\n\nNote that even though in the argument of this function a 32 characters long SSID\nis allowed, in practice valid SSID should have a maximum of 31 characters. This\nis due to a bug in the mesh library that we use in the firmware of the extension.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nSetzt die Mesh-Router-SSID der WIFI Extension 2.0. Diese wird verwendet um den\nMesh Router festzulegen.\n\nZu beachten ist, dass zwar 32 Zeichen als SSID \u00fcbergeben werden k\u00f6nnen, aber im\nMoment davon nur die ersten 31 Zeichen genutzt werden bedingt durch einen Bug\nin der verwendeten Mesh-Bibliothek.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Mesh Router SSID",
      "function_id": 105,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nReturns the mesh router SSID as set by :func:`Set Wifi2 Mesh Router SSID`.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nGibt das Mesh-Router-SSID zur\u00fcck, wie von :func:`Set Wifi2 Mesh Router SSID` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Wifi2 Mesh Router Password",
      "function_id": 106,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nSets the mesh router password (up to 64 characters) for WPA/WPA2 encryption.\nThe password will be used to connect to the mesh router.\n\nTo apply configuration changes to the WIFI Extension 2.0 the\n:func:`Save Wifi2 Configuration` function has to be called and the Master Brick\nhas to be restarted afterwards.\n\nIt is recommended to use the Brick Viewer to configure the WIFI Extension 2.0.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nSetzt das Mesh-Router-Passwort (bis zu 64 Zeichen) f\u00fcr WPA/WPA2 Verschl\u00fcsselung.\nDas Password wird f\u00fcr die Verbindung zum Mesh Router verwendet.\n\nUm Konfigurations\u00e4nderungen f\u00fcr die WIFI Extension 2.0 zu \u00fcbernehmen muss die\n:func:`Save Wifi2 Configuration` Funktion aufgerufen und der Master Brick\ndanach neugestartet werden.\n\nWir empfehlen den Brick Viewer zu verwenden, um die WIFI Extension 2.0 zu\nkonfigurieren.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Password",
          "type": "string",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Password",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Mesh Router Password",
      "function_id": 107,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nReturns the mesh router password as set by :func:`Set Wifi2 Mesh Router Password`.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nGibt das Mesh-Router-Password zur\u00fcck, wie von :func:`Set Wifi2 Mesh Router Password` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Password",
          "type": "string",
          "cardinality": 64,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Password",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Mesh Common Status",
      "function_id": 108,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nReturns the common mesh status of the WIFI Extension 2.0.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nGibt den allgemeinen Mesh-Status der WIFI Extension 2.0 zur\u00fcck.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Status",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Status",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Wifi2 Mesh Status",
                "constants": [
                  {
                    "name": "Disabled",
                    "value": 0
                  },
                  {
                    "name": "WIFI Connecting",
                    "value": 1
                  },
                  {
                    "name": "Got IP",
                    "value": 2
                  },
                  {
                    "name": "Mesh Local",
                    "value": 3
                  },
                  {
                    "name": "Mesh Online",
                    "value": 4
                  },
                  {
                    "name": "AP Available",
                    "value": 5
                  },
                  {
                    "name": "AP Setup",
                    "value": 6
                  },
                  {
                    "name": "Leaf Available",
                    "value": 7
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root Node",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root Node",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Root Candidate",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Root Candidate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Connected Nodes",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connected Nodes",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "RX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "RX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "TX Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "TX Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Mesh Client Status",
      "function_id": 109,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nReturns the mesh client status of the WIFI Extension 2.0.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nGibt den Mesh-Client-Status der WIFI Extension 2.0 zur\u00fcck.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Hostname",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Hostname",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Wifi2 Mesh AP Status",
      "function_id": 110,
      "since_firmware": [
        2,
        4,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nRequires WIFI Extension 2.0 firmware 2.1.0.\n\nReturns the mesh AP status of the WIFI Extension 2.0.\n",
          "de": "\nBen\u00f6tigt WIFI Extension 2.0 Firmware 2.1.0.\n\nGibt den Mesh-AP-Status der WIFI Extension 2.0 zur\u00fcck.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "SSID",
          "type": "string",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "SSID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "IP",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "IP",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Subnet Mask",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Subnet Mask",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Gateway",
          "type": "uint8",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gateway",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "MAC Address",
          "type": "uint8",
          "cardinality": 6,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "MAC Address",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Bricklet XMC Flash Config",
      "function_id": 111,
      "since_firmware": [
        2,
        5,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nThis function is for internal use to flash the initial\nbootstrapper and bootloader to the Bricklets.\n\nIf you need to flash a boostrapper/bootloader (for exmaple\nbecause you made your own Bricklet from scratch) please\ntake a look at our open source flash and test tool at\n`https://github.com/Tinkerforge/flash-test <https://github.com/Tinkerforge/flash-test>`__\n\nDon't use this function directly.\n",
          "de": "\nDiese Funktion wird Tinkerforge-Intern genutzt um initial den\nBootstrapper und Bootloader auf Bricklets zu flashen.\n\nFalls die Notwendigkeit besteht einen Bootstrapper/Bootloader\nzu flashen (zum Beispiel weil ein eigenes Bricklet entwickelet\nwurde) bitte nicht diese Funktion direkt benutzen.\n\nDaf\u00fcr kann unser Open Source Flash/Test-Tool genutzt werden:\n`https://github.com/Tinkerforge/flash-test <https://github.com/Tinkerforge/flash-test>`__\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Config",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Parameter1",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Parameter1",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Parameter2",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Parameter2",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 52,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Return Value",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Return Value",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Return Data",
          "type": "uint8",
          "cardinality": 60,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Return Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Bricklet XMC Flash Data",
      "function_id": 112,
      "since_firmware": [
        2,
        5,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nThis function is for internal use to flash the initial\nbootstrapper and bootloader to the Bricklets.\n\nIf you need to flash a boostrapper/bootloader (for exmaple\nbecause you made your own Bricklet from scratch) please\ntake a look at our open source flash and test tool at\n`https://github.com/Tinkerforge/flash-test <https://github.com/Tinkerforge/flash-test>`__\n\nDon't use this function directly.\n",
          "de": "\nDiese Funktion wird Tinkerforge-Intern genutzt um initial den\nBootstrapper und Bootloader auf Bricklets zu flashen.\n\nFalls die Notwendigkeit besteht einen Bootstrapper/Bootloader\nzu flashen (zum Beispiel weil ein eigenes Bricklet entwickelet\nwurde) bitte nicht diese Funktion direkt benutzen.\n\nDaf\u00fcr kann unser Open Source Flash/Test-Tool genutzt werden:\n`https://github.com/Tinkerforge/flash-test <https://github.com/Tinkerforge/flash-test>`__\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Return Data",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Return Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Bricklets Enabled",
      "function_id": 113,
      "since_firmware": [
        2,
        5,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nThis function is only available in Master Brick hardware version >= 3.0.\n\nEnables/disables all four Bricklets if set to true/false.\n\nIf you disable the Bricklets the power supply to the Bricklets will be disconnected.\nThe Bricklets will lose all configurations if disabled.\n",
          "de": "\nDiese Funktion ist nur nur Master Brick Hardware Version >= 3.0 verf\u00fcgbar.\n\nAktiviert/Deaktiviert alle vier Bricklets wenn auf *true*/*false* gesetzt.\n\nWenn die Bricklets deaktiviert werden, wird die Stromversorgung zu den Bricklets getrennt.\nDie Bricklets verlieren dabei ihre aktuelle konfiguration.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Bricklets Enabled",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Bricklets Enabled",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Bricklets Enabled",
      "function_id": 114,
      "since_firmware": [
        2,
        5,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nReturns *true* if the Bricklets are enabled, *false* otherwise.\n",
          "de": "\nGibt *true* zur\u00fcck wenn die Bricklets aktiviert sind und *false* wenn sie deaktiviert sind.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Bricklets Enabled",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Bricklets Enabled",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set SPITFP Baudrate Config",
      "function_id": 231,
      "since_firmware": [
        2,
        4,
        6
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nThe SPITF protocol can be used with a dynamic baudrate. If the dynamic baudrate is\nenabled, the Brick will try to adapt the baudrate for the communication\nbetween Bricks and Bricklets according to the amount of data that is transferred.\n\nThe baudrate will be increased exponentially if lots of data is sent/received and\ndecreased linearly if little data is sent/received.\n\nThis lowers the baudrate in applications where little data is transferred (e.g.\na weather station) and increases the robustness. If there is lots of data to transfer\n(e.g. Thermal Imaging Bricklet) it automatically increases the baudrate as needed.\n\nIn cases where some data has to transferred as fast as possible every few seconds\n(e.g. RS485 Bricklet with a high baudrate but small payload) you may want to turn\nthe dynamic baudrate off to get the highest possible performance.\n\nThe maximum value of the baudrate can be set per port with the function\n:func:`Set SPITFP Baudrate`. If the dynamic baudrate is disabled, the baudrate\nas set by :func:`Set SPITFP Baudrate` will be used statically.\n",
          "de": "\nDas SPITF-Protokoll kann mit einer dynamischen Baudrate genutzt werden. Wenn die dynamische\nBaudrate aktiviert ist, versucht der Brick die Baudrate anhand des Datenaufkommens\nzwischen Brick und Bricklet anzupassen.\n\nDie Baudrate wird exponentiell erh\u00f6ht wenn viele Daten gesendet/empfangen werden\nund linear verringert wenn wenig Daten gesendet/empfangen werden.\n\nDiese Vorgehensweise verringert die Baudrate in Anwendungen wo nur wenig Daten\nausgetauscht werden m\u00fcssen (z.B. eine Wetterstation) und erh\u00f6ht die Robustheit.\nWenn immer viele Daten ausgetauscht werden (z.B. Thermal Imaging Bricklet), wird\ndie Baudrate automatisch erh\u00f6ht.\n\nIn F\u00e4llen wo wenige Daten all paar Sekunden so schnell wie M\u00f6glich \u00fcbertragen werden\nsollen (z.B. RS485 Bricklet mit hoher Baudrate aber kleinem Payload) kann die\ndynamische Baudrate zum maximieren der Performance ausgestellt werden.\n\nDie maximale Baudrate kann pro Port mit der Funktion :func:`Set SPITFP Baudrate`.\ngesetzt werden. Falls die dynamische Baudrate nicht aktiviert ist, wird die Baudrate\nwie von :func:`Set SPITFP Baudrate` gesetzt statisch verwendet.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable Dynamic Baudrate",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable Dynamic Baudrate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Minimum Dynamic Baudrate",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Minimum Dynamic Baudrate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Baud",
                  "de": "Baud"
                },
                "symbol": "Bd",
                "usage": {
                  "en": "Symbol rate",
                  "de": "Symbolrate"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 400000,
                  "maximum": 2000000
                }
              ],
              "default": 400000,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get SPITFP Baudrate Config",
      "function_id": 232,
      "since_firmware": [
        2,
        4,
        6
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the baudrate config, see :func:`Set SPITFP Baudrate Config`.\n",
          "de": "\nGibt die Baudratenkonfiguration zur\u00fcck, siehe :func:`Set SPITFP Baudrate Config`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enable Dynamic Baudrate",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enable Dynamic Baudrate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Minimum Dynamic Baudrate",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Minimum Dynamic Baudrate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Baud",
                  "de": "Baud"
                },
                "symbol": "Bd",
                "usage": {
                  "en": "Symbol rate",
                  "de": "Symbolrate"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 400000,
                  "maximum": 2000000
                }
              ],
              "default": 400000,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Send Timeout Count",
      "function_id": 233,
      "since_firmware": [
        2,
        4,
        3
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the timeout count for the different communication methods.\n\nThe methods 0-2 are available for all Bricks, 3-7 only for Master Bricks.\n\nThis function is mostly used for debugging during development, in normal operation\nthe counters should nearly always stay at 0.\n",
          "de": "\nGibt den Timeout-Z\u00e4hler f\u00fcr die verschiedenen Kommunikationsm\u00f6glichkeiten zur\u00fcck\n\nDie Kommunikationsm\u00f6glichkeiten 0-2 stehen auf allen Bricks zur verf\u00fcgung, 3-7 nur auf Master Bricks.\n\nDiese Funktion ist haupts\u00e4chlich zum debuggen w\u00e4hrend der Entwicklung gedacht.\nIm normalen Betrieb sollten alle Z\u00e4hler fast immer auf 0 stehen bleiben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Communication Method",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Communication Method",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Communication Method",
                "constants": [
                  {
                    "name": "None",
                    "value": 0
                  },
                  {
                    "name": "USB",
                    "value": 1
                  },
                  {
                    "name": "SPI Stack",
                    "value": 2
                  },
                  {
                    "name": "Chibi",
                    "value": 3
                  },
                  {
                    "name": "RS485",
                    "value": 4
                  },
                  {
                    "name": "WIFI",
                    "value": 5
                  },
                  {
                    "name": "Ethernet",
                    "value": 6
                  },
                  {
                    "name": "WIFI V2",
                    "value": 7
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Timeout Count",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Timeout Count",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set SPITFP Baudrate",
      "function_id": 234,
      "since_firmware": [
        2,
        4,
        3
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the baudrate for a specific Bricklet port.\n\nIf you want to increase the throughput of Bricklets you can increase\nthe baudrate. If you get a high error count because of high\ninterference (see :func:`Get SPITFP Error Count`) you can decrease the\nbaudrate.\n\nIf the dynamic baudrate feature is enabled, the baudrate set by this\nfunction corresponds to the maximum baudrate (see :func:`Set SPITFP Baudrate Config`).\n\nRegulatory testing is done with the default baudrate. If CE compatibility\nor similar is necessary in your applications we recommend to not change\nthe baudrate.\n",
          "de": "\nSetzt die Baudrate eines spezifischen Bricklet Ports .\n\nF\u00fcr einen h\u00f6heren Durchsatz der Bricklets kann die Baudrate erh\u00f6ht werden.\nWenn der Fehlerz\u00e4hler auf Grund von lokaler St\u00f6reinstrahlung hoch ist\n(siehe :func:`Get SPITFP Error Count`) kann die Baudrate verringert werden.\n\nWenn das Feature der dynamische Baudrate aktiviert ist, setzt diese Funktion\ndie maximale Baudrate (siehe :func:`Set SPITFP Baudrate Config`).\n\nEMV Tests werden mit der Standardbaudrate durchgef\u00fchrt. Falls eine\nCE-Kompatibilit\u00e4t o.\u00e4. in der Anwendung notwendig ist empfehlen wir die\nBaudrate nicht zu \u00e4ndern.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Bricklet Port",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Bricklet Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "d"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Baudrate",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Baudrate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Baud",
                  "de": "Baud"
                },
                "symbol": "Bd",
                "usage": {
                  "en": "Symbol rate",
                  "de": "Symbolrate"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 400000,
                  "maximum": 2000000
                }
              ],
              "default": 1400000,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get SPITFP Baudrate",
      "function_id": 235,
      "since_firmware": [
        2,
        4,
        3
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the baudrate for a given Bricklet port, see :func:`Set SPITFP Baudrate`.\n",
          "de": "\nGibt die Baudrate f\u00fcr einen Bricklet Port zur\u00fcck, siehe\n:func:`Set SPITFP Baudrate`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Bricklet Port",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Bricklet Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "d"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Baudrate",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Baudrate",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Baud",
                  "de": "Baud"
                },
                "symbol": "Bd",
                "usage": {
                  "en": "Symbol rate",
                  "de": "Symbolrate"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": [
                {
                  "minimum": 400000,
                  "maximum": 2000000
                }
              ],
              "default": 1400000,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get SPITFP Error Count",
      "function_id": 237,
      "since_firmware": [
        2,
        4,
        3
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the error count for the communication between Brick and Bricklet.\n\nThe errors are divided into\n\n* ACK checksum errors,\n* message checksum errors,\n* framing errors and\n* overflow errors.\n\nThe errors counts are for errors that occur on the Brick side. All\nBricklets have a similar function that returns the errors on the Bricklet side.\n",
          "de": "\nGibt die Anzahl der Fehler die w\u00e4hrend der Kommunikation zwischen Brick und\nBricklet aufgetreten sind zur\u00fcck.\n\nDie Fehler sind aufgeteilt in\n\n* ACK-Checksummen Fehler,\n* Message-Checksummen Fehler,\n* Framing Fehler und\n* Overflow Fehler.\n\nDie Fehlerz\u00e4hler sind f\u00fcr Fehler die auf der Seite des Bricks auftreten.\nJedes Bricklet hat eine \u00e4hnliche Funktion welche die Fehler auf Brickletseite\nausgibt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Bricklet Port",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Bricklet Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "d"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count ACK Checksum",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count ACK Checksum",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count Message Checksum",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Message Checksum",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count Frame",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Frame",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count Overflow",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Overflow",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Enable Status LED",
      "function_id": 238,
      "since_firmware": [
        2,
        3,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nEnables the status LED.\n\nThe status LED is the blue LED next to the USB connector. If enabled is is\non and it flickers if data is transfered. If disabled it is always off.\n\nThe default state is enabled.\n",
          "de": "\nAktiviert die Status LED.\n\nDie Status LED ist die blaue LED neben dem USB-Stecker. Wenn diese aktiviert\nist, ist sie an und sie flackert wenn Daten transferiert werden. Wenn sie\ndeaktiviert ist, ist sie immer aus.\n\nDer Standardzustand ist aktiviert.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Disable Status LED",
      "function_id": 239,
      "since_firmware": [
        2,
        3,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nDisables the status LED.\n\nThe status LED is the blue LED next to the USB connector. If enabled is is\non and it flickers if data is transfered. If disabled it is always off.\n\nThe default state is enabled.\n",
          "de": "\nDeaktiviert die Status LED.\n\nDie Status LED ist die blaue LED neben dem USB-Stecker. Wenn diese aktiviert\nist, ist sie an und sie flackert wenn Daten transferiert werden. Wenn sie\ndeaktiviert ist, ist sie immer aus.\n\nDer Standardzustand ist aktiviert.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Is Status LED Enabled",
      "function_id": 240,
      "since_firmware": [
        2,
        3,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns *true* if the status LED is enabled, *false* otherwise.\n",
          "de": "\nGibt *true* zur\u00fcck wenn die Status LED aktiviert ist, *false* sonst.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Enabled",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Enabled",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Protocol1 Bricklet Name",
      "function_id": 241,
      "since_firmware": [
        2,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nReturns the firmware and protocol version and the name of the Bricklet for a\ngiven port.\n\nThis functions sole purpose is to allow automatic flashing of v1.x.y Bricklet\nplugins.\n",
          "de": "\nGibt die Firmware und Protokoll Version und den Namen des Bricklets f\u00fcr einen\ngegebenen Port zur\u00fcck.\n\nDer einzige Zweck dieser Funktion ist es, automatischen Flashen von Bricklet\nv1.x.y Plugins zu erm\u00f6glichen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Port",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "d"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Protocol Version",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Protocol Version",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Firmware Version",
          "type": "uint8",
          "cardinality": 3,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": 0,
              "name": "Major",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 1,
              "name": "Minor",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 2,
              "name": "Revision",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Name",
          "type": "string",
          "cardinality": 40,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Name",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chip Temperature",
      "function_id": 242,
      "since_firmware": [
        1,
        2,
        1
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the temperature as measured inside the microcontroller. The\nvalue returned is not the ambient temperature!\n\nThe temperature is only proportional to the real temperature and it has an\naccuracy of \u00b115%. Practically it is only useful as an indicator for\ntemperature changes.\n",
          "de": "\nGibt die Temperatur, gemessen im Mikrocontroller, aus. Der\nR\u00fcckgabewert ist nicht die Umgebungstemperatur.\n\nDie Temperatur ist lediglich proportional zur echten Temperatur und hat eine\nGenauigkeit von \u00b115%. Daher beschr\u00e4nkt sich der praktische Nutzen auf die\nIndikation von Temperaturver\u00e4nderungen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Temperature",
          "type": "int16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Temperature",
              "scale": {
                "numerator": 1,
                "denominator": 10
              },
              "unit": {
                "title": {
                  "en": "Degree Celsius",
                  "de": "Grad Celsius"
                },
                "symbol": "\u00b0C",
                "usage": {
                  "en": "Temperature",
                  "de": "Temperatur"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Reset",
      "function_id": 243,
      "since_firmware": [
        1,
        2,
        1
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nCalling this function will reset the Brick. Calling this function\non a Brick inside of a stack will reset the whole stack.\n\nAfter a reset you have to create new device objects,\ncalling functions on the existing ones will result in\nundefined behavior!\n",
          "de": "\nEin Aufruf dieser Funktion setzt den Brick zur\u00fcck. Befindet sich der Brick\ninnerhalb eines Stapels wird der gesamte Stapel zur\u00fcck gesetzt.\n\nNach dem Zur\u00fccksetzen ist es notwendig neue Ger\u00e4teobjekte zu erzeugen,\nFunktionsaufrufe auf bestehende f\u00fchrt zu undefiniertem Verhalten.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Write Bricklet Plugin",
      "function_id": 246,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nWrites 32 bytes of firmware to the bricklet attached at the given port.\nThe bytes are written to the position offset * 32.\n\nThis function is used by Brick Viewer during flashing. It should not be\nnecessary to call it in a normal user program.\n",
          "de": "\nSchreibt 32 Bytes Firmware auf das Bricklet, dass am gegebenen Port angeschlossen ist.\nDie Bytes werden an die Position offset * 32 geschrieben.\n\nDiese Funktion wird vom Brick Viewer w\u00e4hrend des Flashens benutzt. In einem\nnormalem Nutzerprogramm sollte diese Funktion nicht ben\u00f6tigt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Port",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "d"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Offset",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Offset",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Chunk",
          "type": "uint8",
          "cardinality": 32,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Chunk",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Read Bricklet Plugin",
      "function_id": 247,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nReads 32 bytes of firmware from the bricklet attached at the given port.\nThe bytes are read starting at the position offset * 32.\n\nThis function is used by Brick Viewer during flashing. It should not be\nnecessary to call it in a normal user program.\n",
          "de": "\nLiest 32 Bytes Firmware vom Bricklet, dass am gegebenen Port angeschlossen ist.\nDie Bytes werden ab der Position offset * 32 gelesen.\n\nDiese Funktion wird vom Brick Viewer w\u00e4hrend des Flashens benutzt. In einem\nnormalem Nutzerprogramm sollte diese Funktion nicht ben\u00f6tigt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Port",
          "type": "char",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Port",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "d"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Offset",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Offset",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Chunk",
          "type": "uint8",
          "cardinality": 32,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Chunk",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Identity",
      "function_id": 255,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the UID, the UID where the Brick is connected to,\nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position is the position in the stack from '0' (bottom) to '8' (top).\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n",
          "de": "\nGibt die UID, die UID zu der der Brick verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position ist die Position im Stack von '0' (unterster Brick) bis '8' (oberster Brick).\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Uid",
          "type": "string",
          "cardinality": 8,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Uid",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Connected Uid",
          "type": "string",
          "cardinality": 8,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connected Uid",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position",
          "type": "char",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "0",
                  "maximum": "8"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Hardware Version",
          "type": "uint8",
          "cardinality": 3,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": 0,
              "name": "Major",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 1,
              "name": "Minor",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 2,
              "name": "Revision",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Firmware Version",
          "type": "uint8",
          "cardinality": 3,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": 0,
              "name": "Major",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 1,
              "name": "Minor",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 2,
              "name": "Revision",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Device Identifier",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Device Identifier",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    }
  ]
}