{
  "author": "Olaf L\u00fcke <olaf@tinkerforge.com>",
  "api_version": [
    2,
    0,
    1
  ],
  "category": "Bricklet",
  "device_identifier": 298,
  "name": "LCD 128x64",
  "display_name": {
    "short": "LCD 128x64",
    "long": "LCD 128x64 Bricklet"
  },
  "manufacturer": "Tinkerforge",
  "description": {
    "en": "7.1cm (2.8\") display with 128x64 pixel and touch screen",
    "de": "7,1cm (2,8\") Display mit 128x64 Pixel und Touchscreen"
  },
  "released": true,
  "documented": true,
  "doc": {
    "en": "",
    "de": ""
  },
  "packets": [
    {
      "level": "low",
      "type": "function",
      "name": "Write Pixels Low Level",
      "function_id": 1,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nWrites pixels to the specified window.\n\nThe pixels are written into the window line by line top to bottom\nand each line is written from left to right.\n\nIf automatic draw is enabled (default) the pixels are directly written to\nthe screen. Only pixels that have actually changed are updated on the screen,\nthe rest stays the same.\n\nIf automatic draw is disabled the pixels are written to an internal buffer and\nthe buffer is transferred to the display only after :func:`Draw Buffered Frame`\nis called. This can be used to avoid flicker when drawing a complex frame in\nmultiple steps.\n\nAutomatic draw can be configured with the :func:`Set Display Configuration`\nfunction.\n",
          "de": "\nSchreibt Pixel in das angegebene Fenster.\n\nDie Pixel werden zeilenweise von oben nach unten geschrieben\nund die Zeilen werden jeweils von links nach rechts geschrieben.\n\nWenn Automatic Draw aktiviert ist (Standard), dann werden die Pixel direkt auf\nden Display geschrieben. Nur Pixel die sich wirklich ver\u00e4ndert haben werden\nauf dem Display aktualisiert.\n\nWenn Automatic Draw deaktiviert ist, dann werden die Pixel in einen internen\nBuffer geschrieben der dann durch einen Aufruf von :func:`Draw Buffered Frame`\nauf dem Display angezeigt werden kann. Dadurch kann Flicker vermieden werden,\nwenn ein komplexes Bild in mehreren Schritten aufgebaut wird.\n\nAutomatic Draw kann \u00fcber die :func:`Set Display Configuration` Funktion\neingestellt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "X Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Pixels Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": "stream_length",
          "extra": [
            {
              "index": null,
              "name": "Pixels Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 8192
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Pixels Chunk Offset",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": "stream_chunk_offset",
          "extra": [
            {
              "index": null,
              "name": "Pixels Chunk Offset",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Pixels Chunk Data",
          "type": "bool",
          "cardinality": 448,
          "direction": "in",
          "role": "stream_chunk_data",
          "extra": [
            {
              "index": null,
              "name": "Pixels Chunk Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "high",
      "type": "function",
      "name": "Write Pixels",
      "function_id": 1,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nWrites pixels to the specified window.\n\nThe pixels are written into the window line by line top to bottom\nand each line is written from left to right.\n\nIf automatic draw is enabled (default) the pixels are directly written to\nthe screen. Only pixels that have actually changed are updated on the screen,\nthe rest stays the same.\n\nIf automatic draw is disabled the pixels are written to an internal buffer and\nthe buffer is transferred to the display only after :func:`Draw Buffered Frame`\nis called. This can be used to avoid flicker when drawing a complex frame in\nmultiple steps.\n\nAutomatic draw can be configured with the :func:`Set Display Configuration`\nfunction.\n",
          "de": "\nSchreibt Pixel in das angegebene Fenster.\n\nDie Pixel werden zeilenweise von oben nach unten geschrieben\nund die Zeilen werden jeweils von links nach rechts geschrieben.\n\nWenn Automatic Draw aktiviert ist (Standard), dann werden die Pixel direkt auf\nden Display geschrieben. Nur Pixel die sich wirklich ver\u00e4ndert haben werden\nauf dem Display aktualisiert.\n\nWenn Automatic Draw deaktiviert ist, dann werden die Pixel in einen internen\nBuffer geschrieben der dann durch einen Aufruf von :func:`Draw Buffered Frame`\nauf dem Display angezeigt werden kann. Dadurch kann Flicker vermieden werden,\nwenn ein komplexes Bild in mehreren Schritten aufgebaut wird.\n\nAutomatic Draw kann \u00fcber die :func:`Set Display Configuration` Funktion\neingestellt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "X Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "high",
          "name": "Pixels",
          "type": "bool",
          "cardinality": -65535,
          "direction": "in",
          "role": "stream_data",
          "extra": [
            {
              "index": null,
              "name": "Pixels",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "low",
      "type": "function",
      "name": "Read Pixels Low Level",
      "function_id": 2,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReads pixels from the specified window.\n\nThe pixels are read from the window line by line top to bottom\nand each line is read from left to right.\n\nIf automatic draw is enabled (default) the pixels that are read are always the\nsame that are shown on the display.\n\nIf automatic draw is disabled the pixels are read from the internal buffer\n(see :func:`Draw Buffered Frame`).\n\nAutomatic draw can be configured with the :func:`Set Display Configuration`\nfunction.\n",
          "de": "\nLiest Pixel aus dem angegebenen Fenster.\n\nDie Pixel werden zeilenweise von oben nach unten\nund die Zeilen werden jeweils von links nach rechts gelesen.\n\nWenn Automatic Draw aktiviert ist (Standard), dann werden die Pixel direkt vom\nDisplay gelesen.\n\nWenn Automatic Draw deaktiviert ist, dann werden die Pixel aus einen internen\nBuffer gelesen (siehe :func:`Draw Buffered Frame`).\n\nAutomatic Draw kann \u00fcber die :func:`Set Display Configuration` Funktion\neingestellt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "X Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Pixels Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": "stream_length",
          "extra": [
            {
              "index": null,
              "name": "Pixels Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 8192
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Pixels Chunk Offset",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": "stream_chunk_offset",
          "extra": [
            {
              "index": null,
              "name": "Pixels Chunk Offset",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Pixels Chunk Data",
          "type": "bool",
          "cardinality": 480,
          "direction": "out",
          "role": "stream_chunk_data",
          "extra": [
            {
              "index": null,
              "name": "Pixels Chunk Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "high",
      "type": "function",
      "name": "Read Pixels",
      "function_id": 2,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReads pixels from the specified window.\n\nThe pixels are read from the window line by line top to bottom\nand each line is read from left to right.\n\nIf automatic draw is enabled (default) the pixels that are read are always the\nsame that are shown on the display.\n\nIf automatic draw is disabled the pixels are read from the internal buffer\n(see :func:`Draw Buffered Frame`).\n\nAutomatic draw can be configured with the :func:`Set Display Configuration`\nfunction.\n",
          "de": "\nLiest Pixel aus dem angegebenen Fenster.\n\nDie Pixel werden zeilenweise von oben nach unten\nund die Zeilen werden jeweils von links nach rechts gelesen.\n\nWenn Automatic Draw aktiviert ist (Standard), dann werden die Pixel direkt vom\nDisplay gelesen.\n\nWenn Automatic Draw deaktiviert ist, dann werden die Pixel aus einen internen\nBuffer gelesen (siehe :func:`Draw Buffered Frame`).\n\nAutomatic Draw kann \u00fcber die :func:`Set Display Configuration` Funktion\neingestellt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "X Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "high",
          "name": "Pixels",
          "type": "bool",
          "cardinality": -65535,
          "direction": "out",
          "role": "stream_data",
          "extra": [
            {
              "index": null,
              "name": "Pixels",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Clear Display",
      "function_id": 3,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nClears the complete content of the display.\n\nIf automatic draw is enabled (default) the pixels are directly cleared.\n\nIf automatic draw is disabled the the internal buffer is cleared and\nthe buffer is transferred to the display only after :func:`Draw Buffered Frame`\nis called. This can be used to avoid flicker when drawing a complex frame in\nmultiple steps.\n\nAutomatic draw can be configured with the :func:`Set Display Configuration`\nfunction.\n",
          "de": "\nL\u00f6scht den kompletten aktuellen Inhalt des Displays.\n\nWenn Automatic Draw aktiviert ist (Standard), dann werden die Pixel direkt\ngel\u00f6scht.\n\nWenn Automatic Draw deaktiviert ist, dann werden die Pixel im internen\nBuffer gel\u00f6scht der dann durch einen Aufruf von :func:`Draw Buffered Frame`\nauf dem Display angezeigt werden kann. Dadurch kann Flicker vermieden werden,\nwenn ein komplexes Bild in mehreren Schritten aufgebaut wird.\n\nAutomatic Draw kann \u00fcber die :func:`Set Display Configuration` Funktion\neingestellt werden.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Display Configuration",
      "function_id": 4,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the configuration of the display.\n\nIf automatic draw is set to *true*, the display is automatically updated with every\ncall of :func:`Write Pixels` and :func:`Write Line`. If it is set to false, the\nchanges are written into an internal buffer and only shown on the display after\na call of :func:`Draw Buffered Frame`.\n",
          "de": "\nSetzt die Konfiguration des Displays.\n\nWenn Automatic Draw aktiviert (*true*) ist dann wird das Display bei jedem\nAufruf von :func:`Write Pixels` und :func:`Write Line` aktualisiert. Wenn\nAutomatic Draw deaktiviert (*false*) ist, dann werden \u00c4nderungen in einen\ninternen Buffer geschrieben, der dann bei bei einem Aufruf von\n:func:`Draw Buffered Frame` auf dem Display angezeigt wird.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Contrast",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Contrast",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": 14,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Backlight",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Backlight",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 100
                }
              ],
              "default": 100,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Invert",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Invert",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Automatic Draw",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Automatic Draw",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Display Configuration",
      "function_id": 5,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set Display Configuration`.\n",
          "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`Set Display Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Contrast",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Contrast",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": 14,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Backlight",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Backlight",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 100
                }
              ],
              "default": 100,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Invert",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Invert",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Automatic Draw",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Automatic Draw",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Write Line",
      "function_id": 6,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nWrites text to a specific line with a specific position.\n\nFor example: (1, 10, \"Hello\") will write *Hello* in the middle of the\nsecond line of the display.\n\nThe display uses a special 5x7 pixel charset. You can view the characters\nof the charset in Brick Viewer.\n\nIf automatic draw is enabled (default) the text is directly written to\nthe screen. Only pixels that have actually changed are updated on the screen,\nthe rest stays the same.\n\nIf automatic draw is disabled the text is written to an internal buffer and\nthe buffer is transferred to the display only after :func:`Draw Buffered Frame`\nis called. This can be used to avoid flicker when drawing a complex frame in\nmultiple steps.\n\nAutomatic draw can be configured with the :func:`Set Display Configuration`\nfunction.\n\nThis function is a 1:1 replacement for the function with the same name\nin the LCD 20x4 Bricklet. You can draw text at a specific pixel position\nand with different font sizes with the :func:`Draw Text` function.\n",
          "de": "\nSchreibt einen Text in die angegebene Zeile mit einer vorgegebenen Position.\n\nBeispiel: (1, 10, \"Hallo\") schreibt *Hallo* in die Mitte der zweiten Zeile\ndes Displays.\n\nDas Display nutzt einen speziellen 5x7 Pixel Zeichensatz. Der Zeichensatz\nkann mit Hilfe von Brick Viewer angezeigt werden.\n\nWenn Automatic Draw aktiviert ist (Standard), dann wird der Text direkt auf\nden Display geschrieben. Nur Pixel die sich wirklich ver\u00e4ndert haben werden\nauf dem Display aktualisiert.\n\nWenn Automatic Draw deaktiviert ist, dann wird der Text in einen internen\nBuffer geschrieben der dann durch einen Aufruf von :func:`Draw Buffered Frame`\nauf dem Display angezeigt werden kann. Dadurch kann Flicker vermieden werden,\nwenn ein komplexes Bild in mehreren Schritten aufgebaut wird.\n\nAutomatic Draw kann \u00fcber die :func:`Set Display Configuration` Funktion\neingestellt werden.\n\nDiese Funktion ist ein 1:1-Ersatz f\u00fcr die Funktion mit dem gleichen Namen\nim LCD 20x4 Bricklet. Mit der Funktion :func:`Draw Text` kann Text Pixelgenau\nund mit unterschiedlichen Font-Gr\u00f6\u00dfen gezeichnet werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Line",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Line",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 7
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 21
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text",
          "type": "string",
          "cardinality": 22,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Draw Buffered Frame",
      "function_id": 7,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nDraws the currently buffered frame. Normally each call of :func:`Write Pixels` and\n:func:`Write Line` draws directly onto the display. If you turn automatic draw off\n(:func:`Set Display Configuration`), the data is written in an internal buffer and\nonly transferred to the display by calling this function. This can be used to\navoid flicker when drawing a complex frame in multiple steps.\n\nSet the `force complete redraw` to *true* to redraw the whole display\ninstead of only the changed parts. Normally it should not be necessary to set this to\n*true*. It may only become necessary in case of stuck pixels because of errors.\n",
          "de": "\nStellt den aktuell Inhalt des internen Buffers auf dem Display dar. Normalerweise\nschreibt jeder Aufruf von :func:`Write Pixels` und :func:`Write Line` direkt auf\nden Display. Wenn jedoch Automatic Draw deaktiviert ist (:func:`Set Display Configuration`),\ndann werden \u00c4nderungen in einen internen Buffer anstatt auf den\nDisplay geschrieben. Der internen Buffer kann dann durch einen Aufruf dieser\nFunktion auf den Display geschrieben werden. Dadurch kann Flicker vermieden werden,\nwenn ein komplexes Bild in mehreren Schritten aufgebaut wird.\n\nWenn `Force Complete Redraw` auf *true* gesetzt ist, dann wird der gesamte Display\naktualisiert, anstatt nur die Pixel die sich wirklich ver\u00e4ndert haben. Normalerweise\nsollte dies nicht notwendig sein, au\u00dfer bei h\u00e4ngenden Pixeln bedingt durch Fehler.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Force Complete Redraw",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Force Complete Redraw",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Touch Position",
      "function_id": 8,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the last valid touch position:\n\n* Pressure: Amount of pressure applied by the user\n* X: Touch position on x-axis\n* Y: Touch position on y-axis\n* Age: Age of touch press (how long ago it was)\n",
          "de": "\nGibt die letzte g\u00fcltige Touch-Position zur\u00fcck:\n\n* Pressure: Anpressdruck des Touches\n* X: Touch-Position auf der X-Achse\n* Y: Touch-Position auf der Y-Achse\n* Age: Alter des Touches (wie lange ist die Erkennung des Touches her)\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Pressure",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pressure",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 300
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Age",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Age",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Touch Position Callback Configuration",
      "function_id": 9,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nThe period is the period with which the :cb:`Touch Position` callback\nis triggered periodically. A value of 0 turns the callback off.\n\nIf the `value has to change`-parameter is set to true, the callback is only\ntriggered after the value has changed. If the value didn't change within the\nperiod, the callback is triggered immediately on change.\n\nIf it is set to false, the callback is continuously triggered with the period,\nindependent of the value.\n",
          "de": "\nDie Periode ist die Periode mit der der :cb:`Touch Position` Callback\nausgel\u00f6st wird. Ein Wert von 0 schaltet den Callback ab.\n\nWenn der `value has to change`-Parameter auf True gesetzt wird, wird der\nCallback nur ausgel\u00f6st, wenn der Wert sich im Vergleich zum letzten mal ge\u00e4ndert\nhat. \u00c4ndert der Wert sich nicht innerhalb der Periode, so wird der Callback\nsofort ausgel\u00f6st, wenn der Wert sich das n\u00e4chste mal \u00e4ndert.\n\nWird der Parameter auf False gesetzt, so wird der Callback dauerhaft mit der\nfesten Periode ausgel\u00f6st unabh\u00e4ngig von den \u00c4nderungen des Werts.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Touch Position Callback Configuration",
      "function_id": 10,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the callback configuration as set by\n:func:`Set Touch Position Callback Configuration`.\n",
          "de": "\nGibt die Callback-Konfiguration zur\u00fcck, wie mittels\n:func:`Set Touch Position Callback Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "Touch Position",
      "function_id": 11,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set Touch Position Callback Configuration`. The :word:`parameters` are the\nsame as for :func:`Get Touch Position`.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set Touch Position Callback Configuration`, ausgel\u00f6st. Die :word:`parameters` sind\ndie gleichen wie die von :func:`Get Touch Position`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Pressure",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pressure",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 300
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Age",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Age",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Touch Gesture",
      "function_id": 12,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns one of four touch gestures that can be automatically detected by the Bricklet.\n\nThe gestures are swipes from left to right, right to left, top to bottom and bottom to top.\n\nAdditionally to the gestures a vector with a start and end position of the gesture is\nprovided. You can use this vector do determine a more exact location of the gesture (e.g.\nthe swipe from top to bottom was on the left or right part of the screen).\n\nThe age parameter corresponds to the age of gesture (how long ago it was).\n",
          "de": "\nGibt eine der vier Touch-Gesten zur\u00fcck, die das Bricklet automatisch erkennen kann.\n\nDie Gesten umfassen Wischen von links nach rechts, rechts nach links, oben nach\nunten und unten nach oben.\n\nZus\u00e4tzlich zu Geste wird der Vektor von Start- nach Endposition des Wischens\nangegeben. Dieser kann genutzt werden um die genaue Position der Geste zu\nermitteln (z.B. ob ein Wischen von oben nach unten auf der linken oder rechten\ndes Bildschirms erkannt wurde).\n\nDer Age Parameter gibt das Alter der Geste an (wie lange ist die Erkennung\nder Geste her).\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Gesture",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gesture",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Gesture",
                "constants": [
                  {
                    "name": "Left To Right",
                    "value": 0
                  },
                  {
                    "name": "Right To Left",
                    "value": 1
                  },
                  {
                    "name": "Top To Bottom",
                    "value": 2
                  },
                  {
                    "name": "Bottom To Top",
                    "value": 3
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Duration",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Duration",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Pressure Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pressure Max",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 300
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X Start",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y Start",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X End",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y End",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Age",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Age",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Touch Gesture Callback Configuration",
      "function_id": 13,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nThe period is the period with which the :cb:`Touch Gesture` callback\nis triggered periodically. A value of 0 turns the callback off.\n\nIf the `value has to change`-parameter is set to true, the callback is only\ntriggered after the value has changed. If the value didn't change within the\nperiod, the callback is triggered immediately on change.\n\nIf it is set to false, the callback is continuously triggered with the period,\nindependent of the value.\n",
          "de": "\nDie Periode ist die Periode mit der der :cb:`Touch Gesture` Callback\nausgel\u00f6st wird. Ein Wert von 0 schaltet den Callback ab.\n\nWenn der `value has to change`-Parameter auf True gesetzt wird, wird der\nCallback nur ausgel\u00f6st, wenn der Wert sich im Vergleich zum letzten mal ge\u00e4ndert\nhat. \u00c4ndert der Wert sich nicht innerhalb der Periode, so wird der Callback\nsofort ausgel\u00f6st, wenn der Wert sich das n\u00e4chste mal \u00e4ndert.\n\nWird der Parameter auf False gesetzt, so wird der Callback dauerhaft mit der\nfesten Periode ausgel\u00f6st unabh\u00e4ngig von den \u00c4nderungen des Werts.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Touch Gesture Callback Configuration",
      "function_id": 14,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the callback configuration as set by\n:func:`Set Touch Gesture Callback Configuration`.\n",
          "de": "\nGibt die Callback-Konfiguration zur\u00fcck, wie mittels\n:func:`Set Touch Gesture Callback Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "Touch Gesture",
      "function_id": 15,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set Touch Gesture Callback Configuration`. The :word:`parameters` are the\nsame as for :func:`Get Touch Gesture`.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set Touch Gesture Callback Configuration`, ausgel\u00f6st. Die :word:`parameters` sind\ndie gleichen wie die von :func:`Get Touch Gesture`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Gesture",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Gesture",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Gesture",
                "constants": [
                  {
                    "name": "Left To Right",
                    "value": 0
                  },
                  {
                    "name": "Right To Left",
                    "value": 1
                  },
                  {
                    "name": "Top To Bottom",
                    "value": 2
                  },
                  {
                    "name": "Bottom To Top",
                    "value": 3
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Duration",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Duration",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Pressure Max",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pressure Max",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 300
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X Start",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y Start",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "X End",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Y End",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Age",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Age",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Draw Line",
      "function_id": 16,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nDraws a white or black line from (x, y)-start to (x, y)-end.\n",
          "de": "\nZeichnet eine wei\u00dfe oder schwarze Linie von (x, y)-start nach\n(x, y)-end.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Position X Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Color",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Color",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Color",
                "constants": [
                  {
                    "name": "White",
                    "value": false
                  },
                  {
                    "name": "Black",
                    "value": true
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Draw Box",
      "function_id": 17,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nDraws a white or black box from (x, y)-start to (x, y)-end.\n\nIf you set fill to true, the box will be filled with the\ncolor. Otherwise only the outline will be drawn.\n",
          "de": "\nZeichnet ein wei\u00dfes oder schwarzes Rechteck von (x, y)-start nach\n(x, y)-end.\n\nWenn fill auf true gesetzt wird, wird das Rechteck mit\nder angegebenen Farbe ausgef\u00fcllt. Ansonsten wird nur der Umriss\ngezeichnet.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Position X Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y Start",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y Start",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y End",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y End",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Fill",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Fill",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Color",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Color",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Color",
                "constants": [
                  {
                    "name": "White",
                    "value": false
                  },
                  {
                    "name": "Black",
                    "value": true
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Draw Text",
      "function_id": 18,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nDraws a text at the pixel position (x, y).\n\nYou can use one of 9 different font sizes and draw the text in white or black.\n\nThe font conforms to code page 437.\n",
          "de": "\nZeichnet einen Text an die Pixelposition (x, y).\n\nEs k\u00f6nnen 9 unterschiedliche Font-Gr\u00f6\u00dfen genutzt werden und der Text\nkann in wei\u00df oder schwarz gezeichnet werden.\n\nDer der Zeichensatz entspricht Codepage 437.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Font",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Font",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Font",
                "constants": [
                  {
                    "name": "6x8",
                    "value": 0
                  },
                  {
                    "name": "6x16",
                    "value": 1
                  },
                  {
                    "name": "6x24",
                    "value": 2
                  },
                  {
                    "name": "6x32",
                    "value": 3
                  },
                  {
                    "name": "12x16",
                    "value": 4
                  },
                  {
                    "name": "12x24",
                    "value": 5
                  },
                  {
                    "name": "12x32",
                    "value": 6
                  },
                  {
                    "name": "18x24",
                    "value": 7
                  },
                  {
                    "name": "18x32",
                    "value": 8
                  },
                  {
                    "name": "24x32",
                    "value": 9
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Color",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Color",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Color",
                "constants": [
                  {
                    "name": "White",
                    "value": false
                  },
                  {
                    "name": "Black",
                    "value": true
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text",
          "type": "string",
          "cardinality": 22,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Button",
      "function_id": 19,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nDraws a clickable button at position (x, y) with the given text.\n\nYou can use up to 12 buttons.\n\nThe x position + width has to be within the range of 1 to 128 and the y\nposition + height has to be within the range of 1 to 64.\n\nThe minimum useful width/height of a button is 3.\n\nYou can enable a callback for a button press with\n:func:`Set GUI Button Pressed Callback Configuration`. The callback will\nbe triggered for press and release-events.\n\nThe button is drawn in a separate GUI buffer and the button-frame will\nalways stay on top of the graphics drawn with :func:`Write Pixels`. To\nremove the button use :func:`Remove GUI Button`.\n\nIf you want an icon instead of text, you can draw the icon inside of the\nbutton with :func:`Write Pixels`.\n",
          "de": "\nZeichnet einen klickbaren Button an Position (x, y) mit dem gegebenem Text.\n\nEs k\u00f6nnen bis zu 12 Buttons genutzt werden.\n\nDie x-Position + Width muss im Wertebereich von 1 bis 128 liegen und die\ny-Position+Height muss im Wertebereich von 1 bis 64 liegen.\n\nDie minimale n\u00fctzliche Breite/H\u00f6he eines Buttons ist 3.\n\nDer Callback f\u00fcr Button-Events kann mit der Funktion\n:func:`Set GUI Button Pressed Callback Configuration` eingestellt werden.\nDer Callback wird sowohl f\u00fcr gedr\u00fcckt als auch losgelassen Events ausgel\u00f6st.\n\nDer Button wird in einem separaten GUI-Buffer gezeichnet und der Rahmen des\nButtons wird immer \u00fcber den Grafiken bleiben die mit :func:`Write Pixels`\ngezeichnet werden. Um einen Button zu entfernen kann die Funktion\n:func:`Remove GUI Button` genutzt werden.\n\nWenn anstatt des Textes ein Icon verwendet werden soll, kann dieses innerhalb\ndes Buttons mit per :func:`Write Pixels` gezeichnet werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 11
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Width",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Width",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 128
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Height",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Height",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 64
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text",
          "type": "string",
          "cardinality": 16,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Button",
      "function_id": 20,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the button properties for a given `Index` as set by :func:`Set GUI Button`.\n\nAdditionally the `Active` parameter shows if a button is currently active/visible\nor not.\n",
          "de": "\nGibt die Button-Eigenschaften f\u00fcr den gegebenen `Index` zur\u00fcck, wie von\n:func:`Set GUI Button` gesetzt.\n\nZus\u00e4tzlich gibt der `Active`-Parameter an ob der Button aktuell aktiv/sichtbar ist\noder nicht.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 11
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Active",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Active",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Width",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Width",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 128
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Height",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Height",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 1,
                  "maximum": 64
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text",
          "type": "string",
          "cardinality": 16,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Remove GUI Button",
      "function_id": 21,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nRemoves the button with the given index.\n\nYou can use index 255 to remove all buttons.\n",
          "de": "\nEntfernt den Button mit dem gegebenen Index.\n\nIndex 255 kann genutzt werden um alle Buttons zu entfernen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 11
                },
                {
                  "minimum": 255,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Button Pressed Callback Configuration",
      "function_id": 22,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nThe period is the period with which the :cb:`GUI Button Pressed` callback\nis triggered periodically. A value of 0 turns the callback off.\n\nIf the `value has to change`-parameter is set to true, the callback is only\ntriggered after the value has changed. If the value didn't change within the\nperiod, the callback is triggered immediately on change.\n\nIf it is set to false, the callback is continuously triggered with the period,\nindependent of the value.\n",
          "de": "\nDie Periode ist die Periode mit der der :cb:`GUI Button Pressed` Callback\nausgel\u00f6st wird. Ein Wert von 0 schaltet den Callback ab.\n\nWenn der `value has to change`-Parameter auf True gesetzt wird, wird der\nCallback nur ausgel\u00f6st, wenn der Wert sich im Vergleich zum letzten mal ge\u00e4ndert\nhat. \u00c4ndert der Wert sich nicht innerhalb der Periode, so wird der Callback\nsofort ausgel\u00f6st, wenn der Wert sich das n\u00e4chste mal \u00e4ndert.\n\nWird der Parameter auf False gesetzt, so wird der Callback dauerhaft mit der\nfesten Periode ausgel\u00f6st unabh\u00e4ngig von den \u00c4nderungen des Werts.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Button Pressed Callback Configuration",
      "function_id": 23,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the callback configuration as set by\n:func:`Set GUI Button Pressed Callback Configuration`.\n",
          "de": "\nGibt die Callback-Konfiguration zur\u00fcck, wie mittels\n:func:`Set GUI Button Pressed Callback Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Button Pressed",
      "function_id": 24,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the state of the button for the given index.\n\nThe state can either be pressed (true) or released (false).\n",
          "de": "\nGibt den aktuellen Button-Zustand f\u00fcr einen gegebenen Index zur\u00fcck.\n\nDer Zustand kann entweder gedr\u00fcckt (true) oder losgelassen (false) sein.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 11
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Pressed",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pressed",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "GUI Button Pressed",
      "function_id": 25,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set GUI Button Pressed Callback Configuration`. The :word:`parameters` are the\nsame as for :func:`Get GUI Button Pressed`.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set GUI Button Pressed Callback Configuration`, ausgel\u00f6st. Die :word:`parameters` sind\ndie gleichen wie die von :func:`Get GUI Button Pressed`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 11
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Pressed",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pressed",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Slider",
      "function_id": 26,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nDraws a slider at position (x, y) with the given length.\n\nYou can use up to 6 sliders.\n\nIf you use the horizontal direction, the x position + length has to be\nwithin the range of 1 to 128 and the y position has to be within\nthe range of 0 to 46.\n\nIf you use the vertical direction, the y position + length has to be\nwithin the range of 1 to 64 and the x position has to be within\nthe range of 0 to 110.\n\nThe minimum length of a slider is 8.\n\nThe :word:`parameter` value is the start-position of the slider, it can\nbe between 0 and length-8.\n\nYou can enable a callback for the slider value with\n:func:`Set GUI Slider Value Callback Configuration`.\n\nThe slider is drawn in a separate GUI buffer and it will\nalways stay on top of the graphics drawn with :func:`Write Pixels`. To\nremove the button use :func:`Remove GUI Slider`.\n",
          "de": "\nZeichnet einen Slider an Position (x, y) mit der gegebenen L\u00e4nge.\n\nEs k\u00f6nnen bis zu 6 Slider genutzt werden.\n\nWenn eine horizontale Richtung verwendet wird muss Die x-Position + L\u00e4nge\nim Wertebereich von 1 bis 128 und die y-Position im Wertebereich von\n0 bis 46 liegen.\n\nWenn eine vertikale Richtung verwendet wird muss Die y-Position + L\u00e4nge\nim Wertebereich von 1 bis 64 und die x-Position im Wertebereich von\n0 bis 110 liegen.\n\nDie minimale L\u00e4nge des Sliders ist 8.\n\nDer :word:`parameter` value ist die Startposition des Sliders. Diese kann\nzwischen 0 und length-8 liegen.\n\nDer Callback f\u00fcr Slider-Events kann mit der Funktion\n:func:`Set GUI Slider Value Callback Configuration` eingestellt werden.\n\nDer Slider wird in einem separaten GUI-Buffer gezeichnet und der Rahmen des\nButtons wrd immer \u00fcber den Grafiken bleiben die mit :func:`Write Pixels`\ngezeichnet werden. Um einen Button zu entfernen kann die Funktion\n:func:`Remove GUI Slider` genutzt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 5
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 128
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 64
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Length",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 8,
                  "maximum": 128
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Direction",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Direction",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Direction",
                "constants": [
                  {
                    "name": "Horizontal",
                    "value": 0
                  },
                  {
                    "name": "Vertical",
                    "value": 1
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 120
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Slider",
      "function_id": 27,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the slider properties for a given `Index` as set by :func:`Set GUI Slider`.\n\nAdditionally the `Active` parameter shows if a button is currently active/visible\nor not.\n",
          "de": "\nGibt die Slider-Eigenschaften f\u00fcr den gegebenen `Index` zur\u00fcck, wie von\n:func:`Set GUI Slider` gesetzt.\n\nZus\u00e4tzlich gibt der `Active`-Parameter an ob der Button aktuell aktiv/sichtbar ist\noder nicht.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 5
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Active",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Active",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 128
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 64
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Length",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 8,
                  "maximum": 128
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Direction",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Direction",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Direction",
                "constants": [
                  {
                    "name": "Horizontal",
                    "value": 0
                  },
                  {
                    "name": "Vertical",
                    "value": 1
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 120
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Remove GUI Slider",
      "function_id": 28,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nRemoves the slider with the given index.\n\nYou can use index 255 to remove all slider.\n",
          "de": "\nEntfernt den Slider mit dem gegebenen Index.\n\nIndex 255 kann genutzt werden um alle Slider zu entfernen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 5
                },
                {
                  "minimum": 255,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Slider Value Callback Configuration",
      "function_id": 29,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nThe period is the period with which the :cb:`GUI Slider Value` callback\nis triggered periodically. A value of 0 turns the callback off.\n\nIf the `value has to change`-parameter is set to true, the callback is only\ntriggered after the value has changed. If the value didn't change within the\nperiod, the callback is triggered immediately on change.\n\nIf it is set to false, the callback is continuously triggered with the period,\nindependent of the value.\n",
          "de": "\nDie Periode ist die Periode mit der der :cb:`GUI Slider Value` Callback\nausgel\u00f6st wird. Ein Wert von 0 schaltet den Callback ab.\n\nWenn der `value has to change`-Parameter auf True gesetzt wird, wird der\nCallback nur ausgel\u00f6st, wenn der Wert sich im Vergleich zum letzten mal ge\u00e4ndert\nhat. \u00c4ndert der Wert sich nicht innerhalb der Periode, so wird der Callback\nsofort ausgel\u00f6st, wenn der Wert sich das n\u00e4chste mal \u00e4ndert.\n\nWird der Parameter auf False gesetzt, so wird der Callback dauerhaft mit der\nfesten Periode ausgel\u00f6st unabh\u00e4ngig von den \u00c4nderungen des Werts.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Slider Value Callback Configuration",
      "function_id": 30,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the callback configuration as set by\n:func:`Set GUI Slider Value Callback Configuration`.\n",
          "de": "\nGibt die Callback-Konfiguration zur\u00fcck, wie mittels\n:func:`Set GUI Slider Value Callback Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Slider Value",
      "function_id": 31,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the current slider value for the given index.\n",
          "de": "\nGibt den aktuellen Wert des Slider mit dem gegebenen Index zur\u00fcck.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 5
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 120
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "GUI Slider Value",
      "function_id": 32,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set GUI Slider Value Callback Configuration`. The :word:`parameters` are the\nsame as for :func:`Get GUI Slider Value`.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set GUI Slider Value Callback Configuration`, ausgel\u00f6st. Die :word:`parameters` sind\ndie gleichen wie die von :func:`Get GUI Slider Value`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 5
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 120
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Tab Configuration",
      "function_id": 33,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nSets the general configuration for tabs. You can configure the tabs to only\naccept clicks or only swipes (gesture left/right and right/left) or both.\n\nAdditionally, if you set `Clear GUI` to true, all of the GUI elements (buttons,\nslider, graphs) will automatically be removed on every tab change.\n",
          "de": "\nSetzt die generelle Konfiguration f\u00fcr Tabs. Tabs k\u00f6nnen auf klicken, wischen\n(links/rechts und rechts/links) oder beides reagieren.\n\nZus\u00e4tzlich kann `Clear GUI` auf true gesetzt werden. In diesem Fall werden\nbei einem wechsel der Tabs automatisch alle GUI Elemente (Buttons, Slider,\nGraphen) gel\u00f6scht.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Change Tab Config",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Change Tab Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 3,
              "constant_group": {
                "name": "Change Tab On",
                "constants": [
                  {
                    "name": "Click",
                    "value": 1
                  },
                  {
                    "name": "Swipe",
                    "value": 2
                  },
                  {
                    "name": "Click And Swipe",
                    "value": 3
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Clear GUI",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Clear GUI",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Tab Configuration",
      "function_id": 34,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the tab configuration as set by :func:`Set GUI Tab Configuration`.\n",
          "de": "\nGibt die Tab-Konfiguration zur\u00fcck, wie von :func:`Set GUI Tab Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Change Tab Config",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Change Tab Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 3,
              "constant_group": {
                "name": "Change Tab On",
                "constants": [
                  {
                    "name": "Click",
                    "value": 1
                  },
                  {
                    "name": "Swipe",
                    "value": 2
                  },
                  {
                    "name": "Click And Swipe",
                    "value": 3
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Clear GUI",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Clear GUI",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": true,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Tab Text",
      "function_id": 35,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nAdds a text-tab with the given index.\n\nYou can use up to 10 tabs.\n\nA text-tab with the same index as a icon-tab will overwrite the icon-tab.\n",
          "de": "\nF\u00fcgt einen Text-Tab mit dem gegebenen Index hinzu.\n\nEs k\u00f6nnen bis zu 10 Tabs verwendet werden.\n\nEin Text-Tab mit dem gleichen Index wie ein Icon-Tab \u00fcberschreibt diesen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text",
          "type": "string",
          "cardinality": 5,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Tab Text",
      "function_id": 36,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the text for a given index as set by :func:`Set GUI Tab Text`.\n\nAdditionally the `Active` parameter shows if the tab is currently active/visible\nor not.\n",
          "de": "\nGibt den Text f\u00fcr den gegebenen Index zur\u00fcck, wie von :func:`Set GUI Tab Text`\ngesetzt.\n\nZus\u00e4tzlich gibt der `Active`-Parameter an ob der Tab aktuell aktiv/sichtbar ist\noder nicht.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Active",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Active",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text",
          "type": "string",
          "cardinality": 5,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Tab Icon",
      "function_id": 37,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nAdds a icon-tab with the given index. The icon can have a width of 28 pixels\nwith a height of 6 pixels. It is drawn line-by-line from left to right.\n\nYou can use up to 10 tabs.\n\nA icon-tab with the same index as a text-tab will overwrite the text-tab.\n",
          "de": "\nF\u00fcgt einen Icon-Tab mit dem gegebenen Index hinzu. Das Icon kann eine Breite von\n28 Pixel bei einer H\u00f6he von 6 Pixel haben. Es wird Zeile f\u00fcr Zeile von links\nnach rechts gezeichnet.\n\nEs k\u00f6nnen bis zu 10 Tabs verwendet werden.\n\nEin Icon-Tab mit dem gleichen Index wie ein Text-Tab \u00fcberschreibt diesen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Icon",
          "type": "bool",
          "cardinality": 168,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Icon",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Tab Icon",
      "function_id": 38,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the icon for a given index as set by :func:`Set GUI Tab Icon`.\n\nAdditionally the `Active` parameter shows if the tab is currently active/visible\nor not.\n",
          "de": "\nGibt das Icon f\u00fcr den gegebenen Index zur\u00fcck, wie von :func:`Set GUI Tab Icon`\ngesetzt.\n\nZus\u00e4tzlich gibt der `Active`-Parameter an ob der Tab aktuell aktiv/sichtbar ist\noder nicht.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Active",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Active",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Icon",
          "type": "bool",
          "cardinality": 168,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Icon",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Remove GUI Tab",
      "function_id": 39,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nRemoves the tab with the given index.\n\nYou can use index 255 to remove all tabs.\n",
          "de": "\nEntfernt den Tab mit dem gegebenen Index.\n\nIndex 255 kann genutzt werden um alle Tabs zu entfernen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                },
                {
                  "minimum": 255,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Tab Selected",
      "function_id": 40,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nSets the tab with the given index as selected (drawn as selected on the display).\n",
          "de": "\nSetzt den Tab mit dem gegebenen Index als \"selected\" (wird auf dem Display als\nausgew\u00e4hlt gezeichnet)\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Tab Selected Callback Configuration",
      "function_id": 41,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nThe period is the period with which the :cb:`GUI Tab Selected` callback\nis triggered periodically. A value of 0 turns the callback off.\n\nIf the `value has to change`-parameter is set to true, the callback is only\ntriggered after the value has changed. If the value didn't change within the\nperiod, the callback is triggered immediately on change.\n\nIf it is set to false, the callback is continuously triggered with the period,\nindependent of the value.\n",
          "de": "\nDie Periode ist die Periode mit der der :cb:`GUI Tab Selected` Callback\nausgel\u00f6st wird. Ein Wert von 0 schaltet den Callback ab.\n\nWenn der `value has to change`-Parameter auf True gesetzt wird, wird der\nCallback nur ausgel\u00f6st, wenn der Wert sich im Vergleich zum letzten mal ge\u00e4ndert\nhat. \u00c4ndert der Wert sich nicht innerhalb der Periode, so wird der Callback\nsofort ausgel\u00f6st, wenn der Wert sich das n\u00e4chste mal \u00e4ndert.\n\nWird der Parameter auf False gesetzt, so wird der Callback dauerhaft mit der\nfesten Periode ausgel\u00f6st unabh\u00e4ngig von den \u00c4nderungen des Werts.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Tab Selected Callback Configuration",
      "function_id": 42,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "ccf",
        "text": {
          "en": "\nReturns the callback configuration as set by\n:func:`Set GUI Tab Selected Callback Configuration`.\n",
          "de": "\nGibt die Callback-Konfiguration zur\u00fcck, wie mittels\n:func:`Set GUI Tab Selected Callback Configuration` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Period",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Period",
              "scale": {
                "numerator": 1,
                "denominator": 1000
              },
              "unit": {
                "title": {
                  "en": "Second",
                  "de": "Sekunde"
                },
                "symbol": "s",
                "usage": {
                  "en": "Time",
                  "de": "Zeit"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": 0,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Value Has To Change",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Value Has To Change",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": false,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Tab Selected",
      "function_id": 43,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the index of the currently selected tab.\nIf there are not tabs, the returned index is -1.\n",
          "de": "\nGibt den Index des aktuell ausgew\u00e4hlten Tabs zur\u00fcck.\nWenn es keine Tabs gibt, wird -1 als Index zur\u00fcckgegeben.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "int8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": -1,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "callback",
      "name": "GUI Tab Selected",
      "function_id": 44,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "c",
        "text": {
          "en": "\nThis callback is triggered periodically with the period that is set by\n:func:`Set GUI Tab Selected Callback Configuration`. The :word:`parameters` are the\nsame as for :func:`Get GUI Tab Selected`.\n",
          "de": "\nDieser Callback wird mit der Periode, wie gesetzt mit\n:func:`Set GUI Tab Selected Callback Configuration`, ausgel\u00f6st. Die :word:`parameters` sind\ndie gleichen wie die von :func:`Get GUI Tab Selected`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "int8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 9
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set GUI Graph Configuration",
      "function_id": 45,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nSets the configuration for up to four graphs.\n\nThe graph type can be dot-, line- or bar-graph.\n\nThe x and y position are pixel positions.\n\nYou can add a text for the x and y axis.\nThe text is drawn at the inside of the graph and it can overwrite some\nof the graph data. If you need the text outside of the graph you can\nleave this text here empty and use :func:`Draw Text` to draw the caption\noutside of the graph.\n\nThe data of the graph can be set and updated with :func:`Set GUI Graph Data`.\n\nThe graph is drawn in a separate GUI buffer and the graph-frame and data will\nalways stay on top of the graphics drawn with :func:`Write Pixels`. To\nremove the graph use :func:`Remove GUI Graph`.\n",
          "de": "\nSetzt die Konfiguration f\u00fcr bis zu vier Graphen.\n\nDer Graph kann vom Typ Dot-, Line- oder Bar-Graph sein.\n\nDie x- und y-Positionen sind Pixel-Positionen.\n\nEs k\u00f6nnen bis zu 4 Buchstaben Text zur Beschreibung der x- und y-Achse\ngenutzt werden. Der Text wird auf die Innenseite des Graphen gezeichnet und\ner kann Datenpunkte des Graphen \u00fcberschreiben. Wenn der Text au\u00dferhalb des\nGraphen ben\u00f6tigt wird kann die Beschriftung hier leer gelassen werden. Der\nText kann im Nachhinein mit :func:`Draw Text` hinzugef\u00fcgt werden.\n\nDie Datenpunkte des Graphen k\u00f6nnen mit der Funktion :func:`Set GUI Graph Data`\ngesetzt und aktualisiert werden.\n\nDer Graph wird in einem separaten GUI-Buffer gezeichnet und der Rahmen sowie die\nDatenpunkte des Graphen werden immer \u00fcber den Grafiken bleiben die mit\n:func:`Write Pixels` gezeichnet werden. Um einen Graphen zu entfernen kann die\nFunktion :func:`Remove GUI Graph` genutzt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Graph Type",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Graph Type",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Graph Type",
                "constants": [
                  {
                    "name": "Dot",
                    "value": 0
                  },
                  {
                    "name": "Line",
                    "value": 1
                  },
                  {
                    "name": "Bar",
                    "value": 2
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Width",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Width",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 118
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Height",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Height",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text X",
          "type": "string",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text Y",
          "type": "string",
          "cardinality": 4,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get GUI Graph Configuration",
      "function_id": 46,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the graph properties for a given `Index` as set by :func:`Set GUI Graph Configuration`.\n\nAdditionally the `Active` parameter shows if a graph is currently active/visible\nor not.\n",
          "de": "\nGibt die Graph-Eigenschaften f\u00fcr den gegebenen `Index` zur\u00fcck, wie von\n:func:`Set GUI Graph Configuration` gesetzt.\n\nZus\u00e4tzlich gibt der `Active`-Parameter an ob der Button aktuell aktiv/sichtbar ist\noder nicht.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Active",
          "type": "bool",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Active",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Graph Type",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Graph Type",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Graph Type",
                "constants": [
                  {
                    "name": "Dot",
                    "value": 0
                  },
                  {
                    "name": "Line",
                    "value": 1
                  },
                  {
                    "name": "Bar",
                    "value": 2
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position X",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 127
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position Y",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Width",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Width",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 118
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Height",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Height",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 63
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text X",
          "type": "string",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text X",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Text Y",
          "type": "string",
          "cardinality": 4,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Text Y",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "low",
      "type": "function",
      "name": "Set GUI Graph Data Low Level",
      "function_id": 47,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nSets the data for a graph with the given index. You have to configure the graph with\n:func:`Set GUI Graph Configuration` before you can set the first data.\n\nThe graph will show the first n values of the data that you set, where\nn is the width set with :func:`Set GUI Graph Configuration`. If you set\nless then n values it will show the rest of the values as zero.\n\nThe maximum number of data-points you can set is 118 (which also corresponds to the\nmaximum width of the graph).\n\nYou have to scale your values to be between 0 and 255. 0 will be shown\nat the bottom of the graph and 255 at the top.\n",
          "de": "\nSetzt die Datenpukte f\u00fcr den Graph mit dem gegebenen Index. Der Graph muss mit\n:func:`Set GUI Graph Configuration` konfiguriert werden bevor die ersten Daten\ngesetzt werden k\u00f6nnen.\n\nDer Graph zeigt die ersten n Werte der gesetzten Daten an, wobei n die Breite (width)\nist die mit :func:`Set GUI Graph Configuration` gesetzt wurde. Wenn weniger als\nn Werte gesetzt werden, werden die restlichen Datenpunkte als 0 angezeigt.\n\nDie maximale Anzahl an Datenpunkte die gesetzt werden kann ist 118 (dies entspricht\nauch der maximalen Breite des Graphen).\n\nDie gesetzten Werte m\u00fcssen zwischen 0 und 255 skaliert werden. 0 wird unten und\n255 wird oben im Graph gezeichnet.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Data Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": "stream_length",
          "extra": [
            {
              "index": null,
              "name": "Data Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 118
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Data Chunk Offset",
          "type": "uint16",
          "cardinality": 1,
          "direction": "in",
          "role": "stream_chunk_offset",
          "extra": [
            {
              "index": null,
              "name": "Data Chunk Offset",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Data Chunk Data",
          "type": "uint8",
          "cardinality": 59,
          "direction": "in",
          "role": "stream_chunk_data",
          "extra": [
            {
              "index": null,
              "name": "Data Chunk Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "high",
      "type": "function",
      "name": "Set GUI Graph Data",
      "function_id": 47,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nSets the data for a graph with the given index. You have to configure the graph with\n:func:`Set GUI Graph Configuration` before you can set the first data.\n\nThe graph will show the first n values of the data that you set, where\nn is the width set with :func:`Set GUI Graph Configuration`. If you set\nless then n values it will show the rest of the values as zero.\n\nThe maximum number of data-points you can set is 118 (which also corresponds to the\nmaximum width of the graph).\n\nYou have to scale your values to be between 0 and 255. 0 will be shown\nat the bottom of the graph and 255 at the top.\n",
          "de": "\nSetzt die Datenpukte f\u00fcr den Graph mit dem gegebenen Index. Der Graph muss mit\n:func:`Set GUI Graph Configuration` konfiguriert werden bevor die ersten Daten\ngesetzt werden k\u00f6nnen.\n\nDer Graph zeigt die ersten n Werte der gesetzten Daten an, wobei n die Breite (width)\nist die mit :func:`Set GUI Graph Configuration` gesetzt wurde. Wenn weniger als\nn Werte gesetzt werden, werden die restlichen Datenpunkte als 0 angezeigt.\n\nDie maximale Anzahl an Datenpunkte die gesetzt werden kann ist 118 (dies entspricht\nauch der maximalen Breite des Graphen).\n\nDie gesetzten Werte m\u00fcssen zwischen 0 und 255 skaliert werden. 0 wird unten und\n255 wird oben im Graph gezeichnet.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "high",
          "name": "Data",
          "type": "uint8",
          "cardinality": -65535,
          "direction": "in",
          "role": "stream_data",
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "low",
      "type": "function",
      "name": "Get GUI Graph Data Low Level",
      "function_id": 48,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the graph data for a given index as set by :func:`Set GUI Graph Data`.\n",
          "de": "\nGibt die Datenpunkte des Graphen mit dem gegebenen Index zur\u00fcck, wie von\n:func:`Set GUI Graph Data` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Data Length",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": "stream_length",
          "extra": [
            {
              "index": null,
              "name": "Data Length",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 118
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Data Chunk Offset",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": "stream_chunk_offset",
          "extra": [
            {
              "index": null,
              "name": "Data Chunk Offset",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "low",
          "name": "Data Chunk Data",
          "type": "uint8",
          "cardinality": 59,
          "direction": "out",
          "role": "stream_chunk_data",
          "extra": [
            {
              "index": null,
              "name": "Data Chunk Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "high",
      "type": "function",
      "name": "Get GUI Graph Data",
      "function_id": 48,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nReturns the graph data for a given index as set by :func:`Set GUI Graph Data`.\n",
          "de": "\nGibt die Datenpunkte des Graphen mit dem gegebenen Index zur\u00fcck, wie von\n:func:`Set GUI Graph Data` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "high",
          "name": "Data",
          "type": "uint8",
          "cardinality": -65535,
          "direction": "out",
          "role": "stream_data",
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Remove GUI Graph",
      "function_id": 49,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nRemoves the graph with the given index.\n\nYou can use index 255 to remove all graphs.\n",
          "de": "\nEntfernt den Graph mit dem gegebenen Index.\n\nIndex 255 kann genutzt werden um alle Graphen zu entfernen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Index",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Index",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": 0,
                  "maximum": 3
                },
                {
                  "minimum": 255,
                  "maximum": 255
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Remove All GUI",
      "function_id": 50,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "bf",
        "text": {
          "en": "\nRemoves all GUI elements (buttons, slider, graphs, tabs).\n",
          "de": "\nEntfernt alle GUI-Elemente (Buttons, Slider, Graphen, Tabs).\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Touch LED Config",
      "function_id": 51,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the touch LED configuration. By default the LED is on if the\nLCD is touched.\n\nYou can also turn the LED permanently on/off or show a heartbeat.\n\nIf the Bricklet is in bootloader mode, the LED is off.\n",
          "de": "\nSetzt die Konfiguration der Kommunikations-LED. Standardm\u00e4\u00dfig ist die\nLED an wenn das LCD ber\u00fchrt wird.\n\nDie LED kann auch permanent an/aus gestellt werden oder einen Herzschlag anzeigen.\n\nWenn das Bricklet sich im Bootloadermodus befindet ist die LED aus.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Config",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 3,
              "constant_group": {
                "name": "Touch LED Config",
                "constants": [
                  {
                    "name": "Off",
                    "value": 0
                  },
                  {
                    "name": "On",
                    "value": 1
                  },
                  {
                    "name": "Show Heartbeat",
                    "value": 2
                  },
                  {
                    "name": "Show Touch",
                    "value": 3
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Touch LED Config",
      "function_id": 52,
      "since_firmware": [
        2,
        0,
        2
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set Touch LED Config`\n",
          "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`Set Touch LED Config` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Config",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 3,
              "constant_group": {
                "name": "Touch LED Config",
                "constants": [
                  {
                    "name": "Off",
                    "value": 0
                  },
                  {
                    "name": "On",
                    "value": 1
                  },
                  {
                    "name": "Show Heartbeat",
                    "value": 2
                  },
                  {
                    "name": "Show Touch",
                    "value": 3
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get SPITFP Error Count",
      "function_id": 234,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the error count for the communication between Brick and Bricklet.\n\nThe errors are divided into\n\n* ACK checksum errors,\n* message checksum errors,\n* framing errors and\n* overflow errors.\n\nThe errors counts are for errors that occur on the Bricklet side. All\nBricks have a similar function that returns the errors on the Brick side.\n",
          "de": "\nGibt die Anzahl der Fehler die w\u00e4hrend der Kommunikation zwischen Brick und\nBricklet aufgetreten sind zur\u00fcck.\n\nDie Fehler sind aufgeteilt in\n\n* ACK-Checksummen Fehler,\n* Message-Checksummen Fehler,\n* Framing Fehler und\n* Overflow Fehler.\n\nDie Fehlerz\u00e4hler sind f\u00fcr Fehler die auf der Seite des Bricklets auftreten.\nJedes Brick hat eine \u00e4hnliche Funktion welche die Fehler auf Brickseite\nausgibt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Error Count Ack Checksum",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Ack Checksum",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count Message Checksum",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Message Checksum",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count Frame",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Frame",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Error Count Overflow",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Error Count Overflow",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Bootloader Mode",
      "function_id": 235,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nSets the bootloader mode and returns the status after the requested\nmode change was instigated.\n\nYou can change from bootloader mode to firmware mode and vice versa. A change\nfrom bootloader mode to firmware mode will only take place if the entry function,\ndevice identifier and CRC are present and correct.\n\nThis function is used by Brick Viewer during flashing. It should not be\nnecessary to call it in a normal user program.\n",
          "de": "\nSetzt den Bootloader-Modus und gibt den Status zur\u00fcck nachdem die\nModus\u00e4nderungsanfrage bearbeitet wurde.\n\nMit dieser Funktion ist es m\u00f6glich vom Bootloader- in den Firmware-Modus zu\nwechseln und umgekehrt. Ein Welchsel vom Bootloader- in der den Firmware-Modus\nist nur m\u00f6glich wenn Entry-Funktion, Device Identifier und CRC vorhanden und\nkorrekt sind.\n\nDiese Funktion wird vom Brick Viewer w\u00e4hrend des Flashens benutzt. In einem\nnormalem Nutzerprogramm sollte diese Funktion nicht ben\u00f6tigt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Bootloader Mode",
                "constants": [
                  {
                    "name": "Bootloader",
                    "value": 0
                  },
                  {
                    "name": "Firmware",
                    "value": 1
                  },
                  {
                    "name": "Bootloader Wait For Reboot",
                    "value": 2
                  },
                  {
                    "name": "Firmware Wait For Reboot",
                    "value": 3
                  },
                  {
                    "name": "Firmware Wait For Erase And Reboot",
                    "value": 4
                  }
                ]
              }
            }
          ]
        },
        {
          "level": "normal",
          "name": "Status",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Status",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Bootloader Status",
                "constants": [
                  {
                    "name": "OK",
                    "value": 0
                  },
                  {
                    "name": "Invalid Mode",
                    "value": 1
                  },
                  {
                    "name": "No Change",
                    "value": 2
                  },
                  {
                    "name": "Entry Function Not Present",
                    "value": 3
                  },
                  {
                    "name": "Device Identifier Incorrect",
                    "value": 4
                  },
                  {
                    "name": "CRC Mismatch",
                    "value": 5
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Bootloader Mode",
      "function_id": 236,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nReturns the current bootloader mode, see :func:`Set Bootloader Mode`.\n",
          "de": "\nGibt den aktuellen Bootloader-Modus zur\u00fcck, siehe :func:`Set Bootloader Mode`.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Mode",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Mode",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": null,
              "constant_group": {
                "name": "Bootloader Mode",
                "constants": [
                  {
                    "name": "Bootloader",
                    "value": 0
                  },
                  {
                    "name": "Firmware",
                    "value": 1
                  },
                  {
                    "name": "Bootloader Wait For Reboot",
                    "value": 2
                  },
                  {
                    "name": "Firmware Wait For Reboot",
                    "value": 3
                  },
                  {
                    "name": "Firmware Wait For Erase And Reboot",
                    "value": 4
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Write Firmware Pointer",
      "function_id": 237,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nSets the firmware pointer for :func:`Write Firmware`. The pointer has\nto be increased by chunks of size 64. The data is written to flash\nevery 4 chunks (which equals to one page of size 256).\n\nThis function is used by Brick Viewer during flashing. It should not be\nnecessary to call it in a normal user program.\n",
          "de": "\nSetzt den Firmware-Pointer f\u00fcr :func:`Write Firmware`. Der Pointer\nmuss um je 64 Byte erh\u00f6ht werden. Die Daten werden alle 4 Datenbl\u00f6cke\nin den Flash geschrieben (4 Datenbl\u00f6cke entsprechen einer Page mit 256 Byte).\n\nDiese Funktion wird vom Brick Viewer w\u00e4hrend des Flashens benutzt. In einem\nnormalem Nutzerprogramm sollte diese Funktion nicht ben\u00f6tigt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Pointer",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Pointer",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Byte",
                  "de": "Byte"
                },
                "symbol": "B",
                "usage": {
                  "en": "Data Size",
                  "de": "Datenmenge"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Write Firmware",
      "function_id": 238,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nWrites 64 Bytes of firmware at the position as written by\n:func:`Set Write Firmware Pointer` before. The firmware is written\nto flash every 4 chunks.\n\nYou can only write firmware in bootloader mode.\n\nThis function is used by Brick Viewer during flashing. It should not be\nnecessary to call it in a normal user program.\n",
          "de": "\nSchreibt 64 Bytes Firmware an die Position die vorher von\n:func:`Set Write Firmware Pointer` gesetzt wurde. Die Firmware wird\nalle 4 Datenbl\u00f6cke in den Flash geschrieben.\n\nEine Firmware kann nur im Bootloader-Mode geschrieben werden.\n\nDiese Funktion wird vom Brick Viewer w\u00e4hrend des Flashens benutzt. In einem\nnormalem Nutzerprogramm sollte diese Funktion nicht ben\u00f6tigt werden.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Data",
          "type": "uint8",
          "cardinality": 64,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Data",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Status",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Status",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Set Status LED Config",
      "function_id": 239,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nSets the status LED configuration. By default the LED shows\ncommunication traffic between Brick and Bricklet, it flickers once\nfor every 10 received data packets.\n\nYou can also turn the LED permanently on/off or show a heartbeat.\n\nIf the Bricklet is in bootloader mode, the LED is will show heartbeat by default.\n",
          "de": "\nSetzt die Konfiguration der Status-LED. Standardm\u00e4\u00dfig zeigt\ndie LED die Kommunikationsdatenmenge an. Sie blinkt einmal auf pro 10 empfangenen\nDatenpaketen zwischen Brick und Bricklet.\n\nDie LED kann auch permanent an/aus gestellt werden oder einen Herzschlag anzeigen.\n\nWenn das Bricklet sich im Bootlodermodus befindet ist die LED aus.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Config",
          "type": "uint8",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 3,
              "constant_group": {
                "name": "Status LED Config",
                "constants": [
                  {
                    "name": "Off",
                    "value": 0
                  },
                  {
                    "name": "On",
                    "value": 1
                  },
                  {
                    "name": "Show Heartbeat",
                    "value": 2
                  },
                  {
                    "name": "Show Status",
                    "value": 3
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Status LED Config",
      "function_id": 240,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the configuration as set by :func:`Set Status LED Config`\n",
          "de": "\nGibt die Konfiguration zur\u00fcck, wie von :func:`Set Status LED Config` gesetzt.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Config",
          "type": "uint8",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Config",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "constants",
              "default": 3,
              "constant_group": {
                "name": "Status LED Config",
                "constants": [
                  {
                    "name": "Off",
                    "value": 0
                  },
                  {
                    "name": "On",
                    "value": 1
                  },
                  {
                    "name": "Show Heartbeat",
                    "value": 2
                  },
                  {
                    "name": "Show Status",
                    "value": 3
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Chip Temperature",
      "function_id": 242,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the temperature as measured inside the microcontroller. The\nvalue returned is not the ambient temperature!\n\nThe temperature is only proportional to the real temperature and it has bad\naccuracy. Practically it is only useful as an indicator for\ntemperature changes.\n",
          "de": "\nGibt die Temperatur, gemessen im Mikrocontroller, aus. Der\nR\u00fcckgabewert ist nicht die Umgebungstemperatur.\n\nDie Temperatur ist lediglich proportional zur echten Temperatur und hat eine\nhohe Ungenauigkeit. Daher beschr\u00e4nkt sich der praktische Nutzen auf die\nIndikation von Temperaturver\u00e4nderungen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Temperature",
          "type": "int16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Temperature",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": {
                "title": {
                  "en": "Degree Celsius",
                  "de": "Grad Celsius"
                },
                "symbol": "\u00b0C",
                "usage": {
                  "en": "Temperature",
                  "de": "Temperatur"
                },
                "sequence": {
                  "en": "{value} {unit}",
                  "de": "{value} {unit}"
                }
              },
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Reset",
      "function_id": 243,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nCalling this function will reset the Bricklet. All configurations\nwill be lost.\n\nAfter a reset you have to create new device objects,\ncalling functions on the existing ones will result in\nundefined behavior!\n",
          "de": "\nEin Aufruf dieser Funktion setzt das Bricklet zur\u00fcck. Nach einem\nNeustart sind alle Konfiguration verloren.\n\nNach dem Zur\u00fccksetzen ist es notwendig neue Objekte zu erzeugen,\nFunktionsaufrufe auf bestehenden f\u00fchren zu undefiniertem Verhalten.\n"
        }
      },
      "elements": []
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Write UID",
      "function_id": 248,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nWrites a new UID into flash. If you want to set a new UID\nyou have to decode the Base58 encoded UID string into an\ninteger first.\n\nWe recommend that you use Brick Viewer to change the UID.\n",
          "de": "\nSchreibt eine neue UID in den Flash. Die UID muss zuerst\nvom Base58 encodierten String in einen Integer decodiert\nwerden.\n\nWir empfehlen die Nutzung des Brick Viewers zum \u00e4ndern\nder UID.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "UID",
          "type": "uint32",
          "cardinality": 1,
          "direction": "in",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "UID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Read UID",
      "function_id": 249,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "if",
        "text": {
          "en": "\nReturns the current UID as an integer. Encode as\nBase58 to get the usual string version.\n",
          "de": "\nGibt die aktuelle UID als Integer zur\u00fcck. Dieser Integer\nkann als Base58 encodiert werden um an den \u00fcblichen\nUID-String zu gelangen.\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "UID",
          "type": "uint32",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "UID",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    },
    {
      "level": "normal",
      "type": "function",
      "name": "Get Identity",
      "function_id": 255,
      "since_firmware": [
        1,
        0,
        0
      ],
      "doc": {
        "type": "af",
        "text": {
          "en": "\nReturns the UID, the UID where the Bricklet is connected to,\nthe position, the hardware and firmware version as well as the\ndevice identifier.\n\nThe position can be 'a', 'b', 'c', 'd', 'e', 'f', 'g' or 'h' (Bricklet Port).\nA Bricklet connected to an :ref:`Isolator Bricklet <isolator_bricklet>` is always at\nposition 'z'.\n\nThe device identifier numbers can be found :ref:`here <device_identifier>`.\n|device_identifier_constant|\n",
          "de": "\nGibt die UID, die UID zu der das Bricklet verbunden ist, die\nPosition, die Hard- und Firmware Version sowie den Device Identifier\nzur\u00fcck.\n\nDie Position ist 'a', 'b', 'c', 'd', 'e', 'f', 'g' oder 'h' (Bricklet Anschluss).\nEin Bricklet hinter einem :ref:`Isolator Bricklet <isolator_bricklet>` ist immer an\nPosition 'z'.\n\nEine Liste der Device Identifier Werte ist :ref:`hier <device_identifier>` zu\nfinden. |device_identifier_constant|\n"
        }
      },
      "elements": [
        {
          "level": "normal",
          "name": "Uid",
          "type": "string",
          "cardinality": 8,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Uid",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Connected Uid",
          "type": "string",
          "cardinality": 8,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Connected Uid",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": null,
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Position",
          "type": "char",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Position",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": [
                {
                  "minimum": "a",
                  "maximum": "h"
                },
                {
                  "minimum": "z",
                  "maximum": "z"
                }
              ],
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Hardware Version",
          "type": "uint8",
          "cardinality": 3,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": 0,
              "name": "Major",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 1,
              "name": "Minor",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 2,
              "name": "Revision",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Firmware Version",
          "type": "uint8",
          "cardinality": 3,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": 0,
              "name": "Major",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 1,
              "name": "Minor",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            },
            {
              "index": 2,
              "name": "Revision",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        },
        {
          "level": "normal",
          "name": "Device Identifier",
          "type": "uint16",
          "cardinality": 1,
          "direction": "out",
          "role": null,
          "extra": [
            {
              "index": null,
              "name": "Device Identifier",
              "scale": {
                "numerator": 1,
                "denominator": 1
              },
              "unit": null,
              "range": "type",
              "default": null,
              "constant_group": null
            }
          ]
        }
      ]
    }
  ]
}